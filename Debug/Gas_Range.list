
Gas_Range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004460  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08004660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  2000008c  080046ec  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  080046ec  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000584c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000153e  00000000  00000000  00025900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000618  00000000  00000000  00026e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  00027458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001381e  00000000  00000000  000279b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000778c  00000000  00000000  0003b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000754a2  00000000  00000000  00042962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000b7e04  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001884  00000000  00000000  000b7e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004508 	.word	0x08004508

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08004508 	.word	0x08004508

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_ddiv>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	464e      	mov	r6, r9
 800024a:	4645      	mov	r5, r8
 800024c:	46de      	mov	lr, fp
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	4681      	mov	r9, r0
 8000252:	0005      	movs	r5, r0
 8000254:	030c      	lsls	r4, r1, #12
 8000256:	0048      	lsls	r0, r1, #1
 8000258:	4692      	mov	sl, r2
 800025a:	001f      	movs	r7, r3
 800025c:	b085      	sub	sp, #20
 800025e:	0b24      	lsrs	r4, r4, #12
 8000260:	0d40      	lsrs	r0, r0, #21
 8000262:	0fce      	lsrs	r6, r1, #31
 8000264:	2800      	cmp	r0, #0
 8000266:	d100      	bne.n	800026a <__aeabi_ddiv+0x26>
 8000268:	e156      	b.n	8000518 <__aeabi_ddiv+0x2d4>
 800026a:	4bd4      	ldr	r3, [pc, #848]	; (80005bc <__aeabi_ddiv+0x378>)
 800026c:	4298      	cmp	r0, r3
 800026e:	d100      	bne.n	8000272 <__aeabi_ddiv+0x2e>
 8000270:	e172      	b.n	8000558 <__aeabi_ddiv+0x314>
 8000272:	0f6b      	lsrs	r3, r5, #29
 8000274:	00e4      	lsls	r4, r4, #3
 8000276:	431c      	orrs	r4, r3
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	041b      	lsls	r3, r3, #16
 800027c:	4323      	orrs	r3, r4
 800027e:	4698      	mov	r8, r3
 8000280:	4bcf      	ldr	r3, [pc, #828]	; (80005c0 <__aeabi_ddiv+0x37c>)
 8000282:	00ed      	lsls	r5, r5, #3
 8000284:	469b      	mov	fp, r3
 8000286:	2300      	movs	r3, #0
 8000288:	4699      	mov	r9, r3
 800028a:	4483      	add	fp, r0
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	033c      	lsls	r4, r7, #12
 8000290:	007b      	lsls	r3, r7, #1
 8000292:	4650      	mov	r0, sl
 8000294:	0b24      	lsrs	r4, r4, #12
 8000296:	0d5b      	lsrs	r3, r3, #21
 8000298:	0fff      	lsrs	r7, r7, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d100      	bne.n	80002a0 <__aeabi_ddiv+0x5c>
 800029e:	e11f      	b.n	80004e0 <__aeabi_ddiv+0x29c>
 80002a0:	4ac6      	ldr	r2, [pc, #792]	; (80005bc <__aeabi_ddiv+0x378>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d100      	bne.n	80002a8 <__aeabi_ddiv+0x64>
 80002a6:	e162      	b.n	800056e <__aeabi_ddiv+0x32a>
 80002a8:	49c5      	ldr	r1, [pc, #788]	; (80005c0 <__aeabi_ddiv+0x37c>)
 80002aa:	0f42      	lsrs	r2, r0, #29
 80002ac:	468c      	mov	ip, r1
 80002ae:	00e4      	lsls	r4, r4, #3
 80002b0:	4659      	mov	r1, fp
 80002b2:	4314      	orrs	r4, r2
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	4463      	add	r3, ip
 80002b8:	0412      	lsls	r2, r2, #16
 80002ba:	1acb      	subs	r3, r1, r3
 80002bc:	4314      	orrs	r4, r2
 80002be:	469b      	mov	fp, r3
 80002c0:	00c2      	lsls	r2, r0, #3
 80002c2:	2000      	movs	r0, #0
 80002c4:	0033      	movs	r3, r6
 80002c6:	407b      	eors	r3, r7
 80002c8:	469a      	mov	sl, r3
 80002ca:	464b      	mov	r3, r9
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d827      	bhi.n	8000320 <__aeabi_ddiv+0xdc>
 80002d0:	49bc      	ldr	r1, [pc, #752]	; (80005c4 <__aeabi_ddiv+0x380>)
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	58cb      	ldr	r3, [r1, r3]
 80002d6:	469f      	mov	pc, r3
 80002d8:	46b2      	mov	sl, r6
 80002da:	9b00      	ldr	r3, [sp, #0]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d016      	beq.n	800030e <__aeabi_ddiv+0xca>
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d100      	bne.n	80002e6 <__aeabi_ddiv+0xa2>
 80002e4:	e28e      	b.n	8000804 <__aeabi_ddiv+0x5c0>
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d000      	beq.n	80002ec <__aeabi_ddiv+0xa8>
 80002ea:	e0d9      	b.n	80004a0 <__aeabi_ddiv+0x25c>
 80002ec:	2300      	movs	r3, #0
 80002ee:	2400      	movs	r4, #0
 80002f0:	2500      	movs	r5, #0
 80002f2:	4652      	mov	r2, sl
 80002f4:	051b      	lsls	r3, r3, #20
 80002f6:	4323      	orrs	r3, r4
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4313      	orrs	r3, r2
 80002fc:	0028      	movs	r0, r5
 80002fe:	0019      	movs	r1, r3
 8000300:	b005      	add	sp, #20
 8000302:	bcf0      	pop	{r4, r5, r6, r7}
 8000304:	46bb      	mov	fp, r7
 8000306:	46b2      	mov	sl, r6
 8000308:	46a9      	mov	r9, r5
 800030a:	46a0      	mov	r8, r4
 800030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030e:	2400      	movs	r4, #0
 8000310:	2500      	movs	r5, #0
 8000312:	4baa      	ldr	r3, [pc, #680]	; (80005bc <__aeabi_ddiv+0x378>)
 8000314:	e7ed      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000316:	46ba      	mov	sl, r7
 8000318:	46a0      	mov	r8, r4
 800031a:	0015      	movs	r5, r2
 800031c:	9000      	str	r0, [sp, #0]
 800031e:	e7dc      	b.n	80002da <__aeabi_ddiv+0x96>
 8000320:	4544      	cmp	r4, r8
 8000322:	d200      	bcs.n	8000326 <__aeabi_ddiv+0xe2>
 8000324:	e1c7      	b.n	80006b6 <__aeabi_ddiv+0x472>
 8000326:	d100      	bne.n	800032a <__aeabi_ddiv+0xe6>
 8000328:	e1c2      	b.n	80006b0 <__aeabi_ddiv+0x46c>
 800032a:	2301      	movs	r3, #1
 800032c:	425b      	negs	r3, r3
 800032e:	469c      	mov	ip, r3
 8000330:	002e      	movs	r6, r5
 8000332:	4640      	mov	r0, r8
 8000334:	2500      	movs	r5, #0
 8000336:	44e3      	add	fp, ip
 8000338:	0223      	lsls	r3, r4, #8
 800033a:	0e14      	lsrs	r4, r2, #24
 800033c:	431c      	orrs	r4, r3
 800033e:	0c1b      	lsrs	r3, r3, #16
 8000340:	4699      	mov	r9, r3
 8000342:	0423      	lsls	r3, r4, #16
 8000344:	0c1f      	lsrs	r7, r3, #16
 8000346:	0212      	lsls	r2, r2, #8
 8000348:	4649      	mov	r1, r9
 800034a:	9200      	str	r2, [sp, #0]
 800034c:	9701      	str	r7, [sp, #4]
 800034e:	f7ff ff73 	bl	8000238 <__aeabi_uidivmod>
 8000352:	0002      	movs	r2, r0
 8000354:	437a      	muls	r2, r7
 8000356:	040b      	lsls	r3, r1, #16
 8000358:	0c31      	lsrs	r1, r6, #16
 800035a:	4680      	mov	r8, r0
 800035c:	4319      	orrs	r1, r3
 800035e:	428a      	cmp	r2, r1
 8000360:	d907      	bls.n	8000372 <__aeabi_ddiv+0x12e>
 8000362:	2301      	movs	r3, #1
 8000364:	425b      	negs	r3, r3
 8000366:	469c      	mov	ip, r3
 8000368:	1909      	adds	r1, r1, r4
 800036a:	44e0      	add	r8, ip
 800036c:	428c      	cmp	r4, r1
 800036e:	d800      	bhi.n	8000372 <__aeabi_ddiv+0x12e>
 8000370:	e207      	b.n	8000782 <__aeabi_ddiv+0x53e>
 8000372:	1a88      	subs	r0, r1, r2
 8000374:	4649      	mov	r1, r9
 8000376:	f7ff ff5f 	bl	8000238 <__aeabi_uidivmod>
 800037a:	0409      	lsls	r1, r1, #16
 800037c:	468c      	mov	ip, r1
 800037e:	0431      	lsls	r1, r6, #16
 8000380:	4666      	mov	r6, ip
 8000382:	9a01      	ldr	r2, [sp, #4]
 8000384:	0c09      	lsrs	r1, r1, #16
 8000386:	4342      	muls	r2, r0
 8000388:	0003      	movs	r3, r0
 800038a:	4331      	orrs	r1, r6
 800038c:	428a      	cmp	r2, r1
 800038e:	d904      	bls.n	800039a <__aeabi_ddiv+0x156>
 8000390:	1909      	adds	r1, r1, r4
 8000392:	3b01      	subs	r3, #1
 8000394:	428c      	cmp	r4, r1
 8000396:	d800      	bhi.n	800039a <__aeabi_ddiv+0x156>
 8000398:	e1ed      	b.n	8000776 <__aeabi_ddiv+0x532>
 800039a:	1a88      	subs	r0, r1, r2
 800039c:	4642      	mov	r2, r8
 800039e:	0412      	lsls	r2, r2, #16
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4690      	mov	r8, r2
 80003a4:	4641      	mov	r1, r8
 80003a6:	9b00      	ldr	r3, [sp, #0]
 80003a8:	040e      	lsls	r6, r1, #16
 80003aa:	0c1b      	lsrs	r3, r3, #16
 80003ac:	001f      	movs	r7, r3
 80003ae:	9302      	str	r3, [sp, #8]
 80003b0:	9b00      	ldr	r3, [sp, #0]
 80003b2:	0c36      	lsrs	r6, r6, #16
 80003b4:	041b      	lsls	r3, r3, #16
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	000b      	movs	r3, r1
 80003ba:	4373      	muls	r3, r6
 80003bc:	0c12      	lsrs	r2, r2, #16
 80003be:	437e      	muls	r6, r7
 80003c0:	9103      	str	r1, [sp, #12]
 80003c2:	4351      	muls	r1, r2
 80003c4:	437a      	muls	r2, r7
 80003c6:	0c1f      	lsrs	r7, r3, #16
 80003c8:	46bc      	mov	ip, r7
 80003ca:	1876      	adds	r6, r6, r1
 80003cc:	4466      	add	r6, ip
 80003ce:	42b1      	cmp	r1, r6
 80003d0:	d903      	bls.n	80003da <__aeabi_ddiv+0x196>
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	0249      	lsls	r1, r1, #9
 80003d6:	468c      	mov	ip, r1
 80003d8:	4462      	add	r2, ip
 80003da:	0c31      	lsrs	r1, r6, #16
 80003dc:	188a      	adds	r2, r1, r2
 80003de:	0431      	lsls	r1, r6, #16
 80003e0:	041e      	lsls	r6, r3, #16
 80003e2:	0c36      	lsrs	r6, r6, #16
 80003e4:	198e      	adds	r6, r1, r6
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d302      	bcc.n	80003f0 <__aeabi_ddiv+0x1ac>
 80003ea:	d112      	bne.n	8000412 <__aeabi_ddiv+0x1ce>
 80003ec:	42b5      	cmp	r5, r6
 80003ee:	d210      	bcs.n	8000412 <__aeabi_ddiv+0x1ce>
 80003f0:	4643      	mov	r3, r8
 80003f2:	1e59      	subs	r1, r3, #1
 80003f4:	9b00      	ldr	r3, [sp, #0]
 80003f6:	469c      	mov	ip, r3
 80003f8:	4465      	add	r5, ip
 80003fa:	001f      	movs	r7, r3
 80003fc:	429d      	cmp	r5, r3
 80003fe:	419b      	sbcs	r3, r3
 8000400:	425b      	negs	r3, r3
 8000402:	191b      	adds	r3, r3, r4
 8000404:	18c0      	adds	r0, r0, r3
 8000406:	4284      	cmp	r4, r0
 8000408:	d200      	bcs.n	800040c <__aeabi_ddiv+0x1c8>
 800040a:	e1a0      	b.n	800074e <__aeabi_ddiv+0x50a>
 800040c:	d100      	bne.n	8000410 <__aeabi_ddiv+0x1cc>
 800040e:	e19b      	b.n	8000748 <__aeabi_ddiv+0x504>
 8000410:	4688      	mov	r8, r1
 8000412:	1bae      	subs	r6, r5, r6
 8000414:	42b5      	cmp	r5, r6
 8000416:	41ad      	sbcs	r5, r5
 8000418:	1a80      	subs	r0, r0, r2
 800041a:	426d      	negs	r5, r5
 800041c:	1b40      	subs	r0, r0, r5
 800041e:	4284      	cmp	r4, r0
 8000420:	d100      	bne.n	8000424 <__aeabi_ddiv+0x1e0>
 8000422:	e1d5      	b.n	80007d0 <__aeabi_ddiv+0x58c>
 8000424:	4649      	mov	r1, r9
 8000426:	f7ff ff07 	bl	8000238 <__aeabi_uidivmod>
 800042a:	9a01      	ldr	r2, [sp, #4]
 800042c:	040b      	lsls	r3, r1, #16
 800042e:	4342      	muls	r2, r0
 8000430:	0c31      	lsrs	r1, r6, #16
 8000432:	0005      	movs	r5, r0
 8000434:	4319      	orrs	r1, r3
 8000436:	428a      	cmp	r2, r1
 8000438:	d900      	bls.n	800043c <__aeabi_ddiv+0x1f8>
 800043a:	e16c      	b.n	8000716 <__aeabi_ddiv+0x4d2>
 800043c:	1a88      	subs	r0, r1, r2
 800043e:	4649      	mov	r1, r9
 8000440:	f7ff fefa 	bl	8000238 <__aeabi_uidivmod>
 8000444:	9a01      	ldr	r2, [sp, #4]
 8000446:	0436      	lsls	r6, r6, #16
 8000448:	4342      	muls	r2, r0
 800044a:	0409      	lsls	r1, r1, #16
 800044c:	0c36      	lsrs	r6, r6, #16
 800044e:	0003      	movs	r3, r0
 8000450:	430e      	orrs	r6, r1
 8000452:	42b2      	cmp	r2, r6
 8000454:	d900      	bls.n	8000458 <__aeabi_ddiv+0x214>
 8000456:	e153      	b.n	8000700 <__aeabi_ddiv+0x4bc>
 8000458:	9803      	ldr	r0, [sp, #12]
 800045a:	1ab6      	subs	r6, r6, r2
 800045c:	0002      	movs	r2, r0
 800045e:	042d      	lsls	r5, r5, #16
 8000460:	431d      	orrs	r5, r3
 8000462:	9f02      	ldr	r7, [sp, #8]
 8000464:	042b      	lsls	r3, r5, #16
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	435a      	muls	r2, r3
 800046a:	437b      	muls	r3, r7
 800046c:	469c      	mov	ip, r3
 800046e:	0c29      	lsrs	r1, r5, #16
 8000470:	4348      	muls	r0, r1
 8000472:	0c13      	lsrs	r3, r2, #16
 8000474:	4484      	add	ip, r0
 8000476:	4463      	add	r3, ip
 8000478:	4379      	muls	r1, r7
 800047a:	4298      	cmp	r0, r3
 800047c:	d903      	bls.n	8000486 <__aeabi_ddiv+0x242>
 800047e:	2080      	movs	r0, #128	; 0x80
 8000480:	0240      	lsls	r0, r0, #9
 8000482:	4684      	mov	ip, r0
 8000484:	4461      	add	r1, ip
 8000486:	0c18      	lsrs	r0, r3, #16
 8000488:	0412      	lsls	r2, r2, #16
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	0c12      	lsrs	r2, r2, #16
 800048e:	1841      	adds	r1, r0, r1
 8000490:	189b      	adds	r3, r3, r2
 8000492:	428e      	cmp	r6, r1
 8000494:	d200      	bcs.n	8000498 <__aeabi_ddiv+0x254>
 8000496:	e0ff      	b.n	8000698 <__aeabi_ddiv+0x454>
 8000498:	d100      	bne.n	800049c <__aeabi_ddiv+0x258>
 800049a:	e0fa      	b.n	8000692 <__aeabi_ddiv+0x44e>
 800049c:	2301      	movs	r3, #1
 800049e:	431d      	orrs	r5, r3
 80004a0:	4a49      	ldr	r2, [pc, #292]	; (80005c8 <__aeabi_ddiv+0x384>)
 80004a2:	445a      	add	r2, fp
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	dc00      	bgt.n	80004aa <__aeabi_ddiv+0x266>
 80004a8:	e0aa      	b.n	8000600 <__aeabi_ddiv+0x3bc>
 80004aa:	076b      	lsls	r3, r5, #29
 80004ac:	d000      	beq.n	80004b0 <__aeabi_ddiv+0x26c>
 80004ae:	e13d      	b.n	800072c <__aeabi_ddiv+0x4e8>
 80004b0:	08ed      	lsrs	r5, r5, #3
 80004b2:	4643      	mov	r3, r8
 80004b4:	01db      	lsls	r3, r3, #7
 80004b6:	d506      	bpl.n	80004c6 <__aeabi_ddiv+0x282>
 80004b8:	4642      	mov	r2, r8
 80004ba:	4b44      	ldr	r3, [pc, #272]	; (80005cc <__aeabi_ddiv+0x388>)
 80004bc:	401a      	ands	r2, r3
 80004be:	4690      	mov	r8, r2
 80004c0:	2280      	movs	r2, #128	; 0x80
 80004c2:	00d2      	lsls	r2, r2, #3
 80004c4:	445a      	add	r2, fp
 80004c6:	4b42      	ldr	r3, [pc, #264]	; (80005d0 <__aeabi_ddiv+0x38c>)
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dd00      	ble.n	80004ce <__aeabi_ddiv+0x28a>
 80004cc:	e71f      	b.n	800030e <__aeabi_ddiv+0xca>
 80004ce:	4643      	mov	r3, r8
 80004d0:	075b      	lsls	r3, r3, #29
 80004d2:	431d      	orrs	r5, r3
 80004d4:	4643      	mov	r3, r8
 80004d6:	0552      	lsls	r2, r2, #21
 80004d8:	025c      	lsls	r4, r3, #9
 80004da:	0b24      	lsrs	r4, r4, #12
 80004dc:	0d53      	lsrs	r3, r2, #21
 80004de:	e708      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80004e0:	4652      	mov	r2, sl
 80004e2:	4322      	orrs	r2, r4
 80004e4:	d100      	bne.n	80004e8 <__aeabi_ddiv+0x2a4>
 80004e6:	e07b      	b.n	80005e0 <__aeabi_ddiv+0x39c>
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_ddiv+0x2aa>
 80004ec:	e0fa      	b.n	80006e4 <__aeabi_ddiv+0x4a0>
 80004ee:	0020      	movs	r0, r4
 80004f0:	f000 fa04 	bl	80008fc <__clzsi2>
 80004f4:	0002      	movs	r2, r0
 80004f6:	3a0b      	subs	r2, #11
 80004f8:	231d      	movs	r3, #29
 80004fa:	0001      	movs	r1, r0
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	3908      	subs	r1, #8
 8000502:	40da      	lsrs	r2, r3
 8000504:	408c      	lsls	r4, r1
 8000506:	4314      	orrs	r4, r2
 8000508:	4652      	mov	r2, sl
 800050a:	408a      	lsls	r2, r1
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <__aeabi_ddiv+0x390>)
 800050e:	4458      	add	r0, fp
 8000510:	469b      	mov	fp, r3
 8000512:	4483      	add	fp, r0
 8000514:	2000      	movs	r0, #0
 8000516:	e6d5      	b.n	80002c4 <__aeabi_ddiv+0x80>
 8000518:	464b      	mov	r3, r9
 800051a:	4323      	orrs	r3, r4
 800051c:	4698      	mov	r8, r3
 800051e:	d044      	beq.n	80005aa <__aeabi_ddiv+0x366>
 8000520:	2c00      	cmp	r4, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_ddiv+0x2e2>
 8000524:	e0ce      	b.n	80006c4 <__aeabi_ddiv+0x480>
 8000526:	0020      	movs	r0, r4
 8000528:	f000 f9e8 	bl	80008fc <__clzsi2>
 800052c:	0001      	movs	r1, r0
 800052e:	0002      	movs	r2, r0
 8000530:	390b      	subs	r1, #11
 8000532:	231d      	movs	r3, #29
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	4649      	mov	r1, r9
 8000538:	0010      	movs	r0, r2
 800053a:	40d9      	lsrs	r1, r3
 800053c:	3808      	subs	r0, #8
 800053e:	4084      	lsls	r4, r0
 8000540:	000b      	movs	r3, r1
 8000542:	464d      	mov	r5, r9
 8000544:	4323      	orrs	r3, r4
 8000546:	4698      	mov	r8, r3
 8000548:	4085      	lsls	r5, r0
 800054a:	4823      	ldr	r0, [pc, #140]	; (80005d8 <__aeabi_ddiv+0x394>)
 800054c:	1a83      	subs	r3, r0, r2
 800054e:	469b      	mov	fp, r3
 8000550:	2300      	movs	r3, #0
 8000552:	4699      	mov	r9, r3
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e69a      	b.n	800028e <__aeabi_ddiv+0x4a>
 8000558:	464b      	mov	r3, r9
 800055a:	4323      	orrs	r3, r4
 800055c:	4698      	mov	r8, r3
 800055e:	d11d      	bne.n	800059c <__aeabi_ddiv+0x358>
 8000560:	2308      	movs	r3, #8
 8000562:	4699      	mov	r9, r3
 8000564:	3b06      	subs	r3, #6
 8000566:	2500      	movs	r5, #0
 8000568:	4683      	mov	fp, r0
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	e68f      	b.n	800028e <__aeabi_ddiv+0x4a>
 800056e:	4652      	mov	r2, sl
 8000570:	4322      	orrs	r2, r4
 8000572:	d109      	bne.n	8000588 <__aeabi_ddiv+0x344>
 8000574:	2302      	movs	r3, #2
 8000576:	4649      	mov	r1, r9
 8000578:	4319      	orrs	r1, r3
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <__aeabi_ddiv+0x398>)
 800057c:	4689      	mov	r9, r1
 800057e:	469c      	mov	ip, r3
 8000580:	2400      	movs	r4, #0
 8000582:	2002      	movs	r0, #2
 8000584:	44e3      	add	fp, ip
 8000586:	e69d      	b.n	80002c4 <__aeabi_ddiv+0x80>
 8000588:	2303      	movs	r3, #3
 800058a:	464a      	mov	r2, r9
 800058c:	431a      	orrs	r2, r3
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <__aeabi_ddiv+0x398>)
 8000590:	4691      	mov	r9, r2
 8000592:	469c      	mov	ip, r3
 8000594:	4652      	mov	r2, sl
 8000596:	2003      	movs	r0, #3
 8000598:	44e3      	add	fp, ip
 800059a:	e693      	b.n	80002c4 <__aeabi_ddiv+0x80>
 800059c:	230c      	movs	r3, #12
 800059e:	4699      	mov	r9, r3
 80005a0:	3b09      	subs	r3, #9
 80005a2:	46a0      	mov	r8, r4
 80005a4:	4683      	mov	fp, r0
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	e671      	b.n	800028e <__aeabi_ddiv+0x4a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	4699      	mov	r9, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	469b      	mov	fp, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	2500      	movs	r5, #0
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e669      	b.n	800028e <__aeabi_ddiv+0x4a>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	000007ff 	.word	0x000007ff
 80005c0:	fffffc01 	.word	0xfffffc01
 80005c4:	080045c8 	.word	0x080045c8
 80005c8:	000003ff 	.word	0x000003ff
 80005cc:	feffffff 	.word	0xfeffffff
 80005d0:	000007fe 	.word	0x000007fe
 80005d4:	000003f3 	.word	0x000003f3
 80005d8:	fffffc0d 	.word	0xfffffc0d
 80005dc:	fffff801 	.word	0xfffff801
 80005e0:	4649      	mov	r1, r9
 80005e2:	2301      	movs	r3, #1
 80005e4:	4319      	orrs	r1, r3
 80005e6:	4689      	mov	r9, r1
 80005e8:	2400      	movs	r4, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	e66a      	b.n	80002c4 <__aeabi_ddiv+0x80>
 80005ee:	2300      	movs	r3, #0
 80005f0:	2480      	movs	r4, #128	; 0x80
 80005f2:	469a      	mov	sl, r3
 80005f4:	2500      	movs	r5, #0
 80005f6:	4b8a      	ldr	r3, [pc, #552]	; (8000820 <__aeabi_ddiv+0x5dc>)
 80005f8:	0324      	lsls	r4, r4, #12
 80005fa:	e67a      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80005fc:	2501      	movs	r5, #1
 80005fe:	426d      	negs	r5, r5
 8000600:	2301      	movs	r3, #1
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	2b38      	cmp	r3, #56	; 0x38
 8000606:	dd00      	ble.n	800060a <__aeabi_ddiv+0x3c6>
 8000608:	e670      	b.n	80002ec <__aeabi_ddiv+0xa8>
 800060a:	2b1f      	cmp	r3, #31
 800060c:	dc00      	bgt.n	8000610 <__aeabi_ddiv+0x3cc>
 800060e:	e0bf      	b.n	8000790 <__aeabi_ddiv+0x54c>
 8000610:	211f      	movs	r1, #31
 8000612:	4249      	negs	r1, r1
 8000614:	1a8a      	subs	r2, r1, r2
 8000616:	4641      	mov	r1, r8
 8000618:	40d1      	lsrs	r1, r2
 800061a:	000a      	movs	r2, r1
 800061c:	2b20      	cmp	r3, #32
 800061e:	d004      	beq.n	800062a <__aeabi_ddiv+0x3e6>
 8000620:	4641      	mov	r1, r8
 8000622:	4b80      	ldr	r3, [pc, #512]	; (8000824 <__aeabi_ddiv+0x5e0>)
 8000624:	445b      	add	r3, fp
 8000626:	4099      	lsls	r1, r3
 8000628:	430d      	orrs	r5, r1
 800062a:	1e6b      	subs	r3, r5, #1
 800062c:	419d      	sbcs	r5, r3
 800062e:	2307      	movs	r3, #7
 8000630:	432a      	orrs	r2, r5
 8000632:	001d      	movs	r5, r3
 8000634:	2400      	movs	r4, #0
 8000636:	4015      	ands	r5, r2
 8000638:	4213      	tst	r3, r2
 800063a:	d100      	bne.n	800063e <__aeabi_ddiv+0x3fa>
 800063c:	e0d4      	b.n	80007e8 <__aeabi_ddiv+0x5a4>
 800063e:	210f      	movs	r1, #15
 8000640:	2300      	movs	r3, #0
 8000642:	4011      	ands	r1, r2
 8000644:	2904      	cmp	r1, #4
 8000646:	d100      	bne.n	800064a <__aeabi_ddiv+0x406>
 8000648:	e0cb      	b.n	80007e2 <__aeabi_ddiv+0x59e>
 800064a:	1d11      	adds	r1, r2, #4
 800064c:	4291      	cmp	r1, r2
 800064e:	4192      	sbcs	r2, r2
 8000650:	4252      	negs	r2, r2
 8000652:	189b      	adds	r3, r3, r2
 8000654:	000a      	movs	r2, r1
 8000656:	0219      	lsls	r1, r3, #8
 8000658:	d400      	bmi.n	800065c <__aeabi_ddiv+0x418>
 800065a:	e0c2      	b.n	80007e2 <__aeabi_ddiv+0x59e>
 800065c:	2301      	movs	r3, #1
 800065e:	2400      	movs	r4, #0
 8000660:	2500      	movs	r5, #0
 8000662:	e646      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	4641      	mov	r1, r8
 8000668:	031b      	lsls	r3, r3, #12
 800066a:	4219      	tst	r1, r3
 800066c:	d008      	beq.n	8000680 <__aeabi_ddiv+0x43c>
 800066e:	421c      	tst	r4, r3
 8000670:	d106      	bne.n	8000680 <__aeabi_ddiv+0x43c>
 8000672:	431c      	orrs	r4, r3
 8000674:	0324      	lsls	r4, r4, #12
 8000676:	46ba      	mov	sl, r7
 8000678:	0015      	movs	r5, r2
 800067a:	4b69      	ldr	r3, [pc, #420]	; (8000820 <__aeabi_ddiv+0x5dc>)
 800067c:	0b24      	lsrs	r4, r4, #12
 800067e:	e638      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000680:	2480      	movs	r4, #128	; 0x80
 8000682:	4643      	mov	r3, r8
 8000684:	0324      	lsls	r4, r4, #12
 8000686:	431c      	orrs	r4, r3
 8000688:	0324      	lsls	r4, r4, #12
 800068a:	46b2      	mov	sl, r6
 800068c:	4b64      	ldr	r3, [pc, #400]	; (8000820 <__aeabi_ddiv+0x5dc>)
 800068e:	0b24      	lsrs	r4, r4, #12
 8000690:	e62f      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_ddiv+0x454>
 8000696:	e703      	b.n	80004a0 <__aeabi_ddiv+0x25c>
 8000698:	19a6      	adds	r6, r4, r6
 800069a:	1e68      	subs	r0, r5, #1
 800069c:	42a6      	cmp	r6, r4
 800069e:	d200      	bcs.n	80006a2 <__aeabi_ddiv+0x45e>
 80006a0:	e08d      	b.n	80007be <__aeabi_ddiv+0x57a>
 80006a2:	428e      	cmp	r6, r1
 80006a4:	d200      	bcs.n	80006a8 <__aeabi_ddiv+0x464>
 80006a6:	e0a3      	b.n	80007f0 <__aeabi_ddiv+0x5ac>
 80006a8:	d100      	bne.n	80006ac <__aeabi_ddiv+0x468>
 80006aa:	e0b3      	b.n	8000814 <__aeabi_ddiv+0x5d0>
 80006ac:	0005      	movs	r5, r0
 80006ae:	e6f5      	b.n	800049c <__aeabi_ddiv+0x258>
 80006b0:	42aa      	cmp	r2, r5
 80006b2:	d900      	bls.n	80006b6 <__aeabi_ddiv+0x472>
 80006b4:	e639      	b.n	800032a <__aeabi_ddiv+0xe6>
 80006b6:	4643      	mov	r3, r8
 80006b8:	07de      	lsls	r6, r3, #31
 80006ba:	0858      	lsrs	r0, r3, #1
 80006bc:	086b      	lsrs	r3, r5, #1
 80006be:	431e      	orrs	r6, r3
 80006c0:	07ed      	lsls	r5, r5, #31
 80006c2:	e639      	b.n	8000338 <__aeabi_ddiv+0xf4>
 80006c4:	4648      	mov	r0, r9
 80006c6:	f000 f919 	bl	80008fc <__clzsi2>
 80006ca:	0001      	movs	r1, r0
 80006cc:	0002      	movs	r2, r0
 80006ce:	3115      	adds	r1, #21
 80006d0:	3220      	adds	r2, #32
 80006d2:	291c      	cmp	r1, #28
 80006d4:	dc00      	bgt.n	80006d8 <__aeabi_ddiv+0x494>
 80006d6:	e72c      	b.n	8000532 <__aeabi_ddiv+0x2ee>
 80006d8:	464b      	mov	r3, r9
 80006da:	3808      	subs	r0, #8
 80006dc:	4083      	lsls	r3, r0
 80006de:	2500      	movs	r5, #0
 80006e0:	4698      	mov	r8, r3
 80006e2:	e732      	b.n	800054a <__aeabi_ddiv+0x306>
 80006e4:	f000 f90a 	bl	80008fc <__clzsi2>
 80006e8:	0003      	movs	r3, r0
 80006ea:	001a      	movs	r2, r3
 80006ec:	3215      	adds	r2, #21
 80006ee:	3020      	adds	r0, #32
 80006f0:	2a1c      	cmp	r2, #28
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_ddiv+0x4b2>
 80006f4:	e700      	b.n	80004f8 <__aeabi_ddiv+0x2b4>
 80006f6:	4654      	mov	r4, sl
 80006f8:	3b08      	subs	r3, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	409c      	lsls	r4, r3
 80006fe:	e705      	b.n	800050c <__aeabi_ddiv+0x2c8>
 8000700:	1936      	adds	r6, r6, r4
 8000702:	3b01      	subs	r3, #1
 8000704:	42b4      	cmp	r4, r6
 8000706:	d900      	bls.n	800070a <__aeabi_ddiv+0x4c6>
 8000708:	e6a6      	b.n	8000458 <__aeabi_ddiv+0x214>
 800070a:	42b2      	cmp	r2, r6
 800070c:	d800      	bhi.n	8000710 <__aeabi_ddiv+0x4cc>
 800070e:	e6a3      	b.n	8000458 <__aeabi_ddiv+0x214>
 8000710:	1e83      	subs	r3, r0, #2
 8000712:	1936      	adds	r6, r6, r4
 8000714:	e6a0      	b.n	8000458 <__aeabi_ddiv+0x214>
 8000716:	1909      	adds	r1, r1, r4
 8000718:	3d01      	subs	r5, #1
 800071a:	428c      	cmp	r4, r1
 800071c:	d900      	bls.n	8000720 <__aeabi_ddiv+0x4dc>
 800071e:	e68d      	b.n	800043c <__aeabi_ddiv+0x1f8>
 8000720:	428a      	cmp	r2, r1
 8000722:	d800      	bhi.n	8000726 <__aeabi_ddiv+0x4e2>
 8000724:	e68a      	b.n	800043c <__aeabi_ddiv+0x1f8>
 8000726:	1e85      	subs	r5, r0, #2
 8000728:	1909      	adds	r1, r1, r4
 800072a:	e687      	b.n	800043c <__aeabi_ddiv+0x1f8>
 800072c:	230f      	movs	r3, #15
 800072e:	402b      	ands	r3, r5
 8000730:	2b04      	cmp	r3, #4
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x4f2>
 8000734:	e6bc      	b.n	80004b0 <__aeabi_ddiv+0x26c>
 8000736:	2305      	movs	r3, #5
 8000738:	425b      	negs	r3, r3
 800073a:	42ab      	cmp	r3, r5
 800073c:	419b      	sbcs	r3, r3
 800073e:	3504      	adds	r5, #4
 8000740:	425b      	negs	r3, r3
 8000742:	08ed      	lsrs	r5, r5, #3
 8000744:	4498      	add	r8, r3
 8000746:	e6b4      	b.n	80004b2 <__aeabi_ddiv+0x26e>
 8000748:	42af      	cmp	r7, r5
 800074a:	d900      	bls.n	800074e <__aeabi_ddiv+0x50a>
 800074c:	e660      	b.n	8000410 <__aeabi_ddiv+0x1cc>
 800074e:	4282      	cmp	r2, r0
 8000750:	d804      	bhi.n	800075c <__aeabi_ddiv+0x518>
 8000752:	d000      	beq.n	8000756 <__aeabi_ddiv+0x512>
 8000754:	e65c      	b.n	8000410 <__aeabi_ddiv+0x1cc>
 8000756:	42ae      	cmp	r6, r5
 8000758:	d800      	bhi.n	800075c <__aeabi_ddiv+0x518>
 800075a:	e659      	b.n	8000410 <__aeabi_ddiv+0x1cc>
 800075c:	2302      	movs	r3, #2
 800075e:	425b      	negs	r3, r3
 8000760:	469c      	mov	ip, r3
 8000762:	9b00      	ldr	r3, [sp, #0]
 8000764:	44e0      	add	r8, ip
 8000766:	469c      	mov	ip, r3
 8000768:	4465      	add	r5, ip
 800076a:	429d      	cmp	r5, r3
 800076c:	419b      	sbcs	r3, r3
 800076e:	425b      	negs	r3, r3
 8000770:	191b      	adds	r3, r3, r4
 8000772:	18c0      	adds	r0, r0, r3
 8000774:	e64d      	b.n	8000412 <__aeabi_ddiv+0x1ce>
 8000776:	428a      	cmp	r2, r1
 8000778:	d800      	bhi.n	800077c <__aeabi_ddiv+0x538>
 800077a:	e60e      	b.n	800039a <__aeabi_ddiv+0x156>
 800077c:	1e83      	subs	r3, r0, #2
 800077e:	1909      	adds	r1, r1, r4
 8000780:	e60b      	b.n	800039a <__aeabi_ddiv+0x156>
 8000782:	428a      	cmp	r2, r1
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x544>
 8000786:	e5f4      	b.n	8000372 <__aeabi_ddiv+0x12e>
 8000788:	1e83      	subs	r3, r0, #2
 800078a:	4698      	mov	r8, r3
 800078c:	1909      	adds	r1, r1, r4
 800078e:	e5f0      	b.n	8000372 <__aeabi_ddiv+0x12e>
 8000790:	4925      	ldr	r1, [pc, #148]	; (8000828 <__aeabi_ddiv+0x5e4>)
 8000792:	0028      	movs	r0, r5
 8000794:	4459      	add	r1, fp
 8000796:	408d      	lsls	r5, r1
 8000798:	4642      	mov	r2, r8
 800079a:	408a      	lsls	r2, r1
 800079c:	1e69      	subs	r1, r5, #1
 800079e:	418d      	sbcs	r5, r1
 80007a0:	4641      	mov	r1, r8
 80007a2:	40d8      	lsrs	r0, r3
 80007a4:	40d9      	lsrs	r1, r3
 80007a6:	4302      	orrs	r2, r0
 80007a8:	432a      	orrs	r2, r5
 80007aa:	000b      	movs	r3, r1
 80007ac:	0751      	lsls	r1, r2, #29
 80007ae:	d100      	bne.n	80007b2 <__aeabi_ddiv+0x56e>
 80007b0:	e751      	b.n	8000656 <__aeabi_ddiv+0x412>
 80007b2:	210f      	movs	r1, #15
 80007b4:	4011      	ands	r1, r2
 80007b6:	2904      	cmp	r1, #4
 80007b8:	d000      	beq.n	80007bc <__aeabi_ddiv+0x578>
 80007ba:	e746      	b.n	800064a <__aeabi_ddiv+0x406>
 80007bc:	e74b      	b.n	8000656 <__aeabi_ddiv+0x412>
 80007be:	0005      	movs	r5, r0
 80007c0:	428e      	cmp	r6, r1
 80007c2:	d000      	beq.n	80007c6 <__aeabi_ddiv+0x582>
 80007c4:	e66a      	b.n	800049c <__aeabi_ddiv+0x258>
 80007c6:	9a00      	ldr	r2, [sp, #0]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d000      	beq.n	80007ce <__aeabi_ddiv+0x58a>
 80007cc:	e666      	b.n	800049c <__aeabi_ddiv+0x258>
 80007ce:	e667      	b.n	80004a0 <__aeabi_ddiv+0x25c>
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <__aeabi_ddiv+0x5e8>)
 80007d2:	445a      	add	r2, fp
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dc00      	bgt.n	80007da <__aeabi_ddiv+0x596>
 80007d8:	e710      	b.n	80005fc <__aeabi_ddiv+0x3b8>
 80007da:	2301      	movs	r3, #1
 80007dc:	2500      	movs	r5, #0
 80007de:	4498      	add	r8, r3
 80007e0:	e667      	b.n	80004b2 <__aeabi_ddiv+0x26e>
 80007e2:	075d      	lsls	r5, r3, #29
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	0b1c      	lsrs	r4, r3, #12
 80007e8:	08d2      	lsrs	r2, r2, #3
 80007ea:	2300      	movs	r3, #0
 80007ec:	4315      	orrs	r5, r2
 80007ee:	e580      	b.n	80002f2 <__aeabi_ddiv+0xae>
 80007f0:	9800      	ldr	r0, [sp, #0]
 80007f2:	3d02      	subs	r5, #2
 80007f4:	0042      	lsls	r2, r0, #1
 80007f6:	4282      	cmp	r2, r0
 80007f8:	41bf      	sbcs	r7, r7
 80007fa:	427f      	negs	r7, r7
 80007fc:	193c      	adds	r4, r7, r4
 80007fe:	1936      	adds	r6, r6, r4
 8000800:	9200      	str	r2, [sp, #0]
 8000802:	e7dd      	b.n	80007c0 <__aeabi_ddiv+0x57c>
 8000804:	2480      	movs	r4, #128	; 0x80
 8000806:	4643      	mov	r3, r8
 8000808:	0324      	lsls	r4, r4, #12
 800080a:	431c      	orrs	r4, r3
 800080c:	0324      	lsls	r4, r4, #12
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__aeabi_ddiv+0x5dc>)
 8000810:	0b24      	lsrs	r4, r4, #12
 8000812:	e56e      	b.n	80002f2 <__aeabi_ddiv+0xae>
 8000814:	9a00      	ldr	r2, [sp, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3ea      	bcc.n	80007f0 <__aeabi_ddiv+0x5ac>
 800081a:	0005      	movs	r5, r0
 800081c:	e7d3      	b.n	80007c6 <__aeabi_ddiv+0x582>
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	000007ff 	.word	0x000007ff
 8000824:	0000043e 	.word	0x0000043e
 8000828:	0000041e 	.word	0x0000041e
 800082c:	000003ff 	.word	0x000003ff

08000830 <__aeabi_d2iz>:
 8000830:	000a      	movs	r2, r1
 8000832:	b530      	push	{r4, r5, lr}
 8000834:	4c13      	ldr	r4, [pc, #76]	; (8000884 <__aeabi_d2iz+0x54>)
 8000836:	0053      	lsls	r3, r2, #1
 8000838:	0309      	lsls	r1, r1, #12
 800083a:	0005      	movs	r5, r0
 800083c:	0b09      	lsrs	r1, r1, #12
 800083e:	2000      	movs	r0, #0
 8000840:	0d5b      	lsrs	r3, r3, #21
 8000842:	0fd2      	lsrs	r2, r2, #31
 8000844:	42a3      	cmp	r3, r4
 8000846:	dd04      	ble.n	8000852 <__aeabi_d2iz+0x22>
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <__aeabi_d2iz+0x58>)
 800084a:	4283      	cmp	r3, r0
 800084c:	dd02      	ble.n	8000854 <__aeabi_d2iz+0x24>
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <__aeabi_d2iz+0x5c>)
 8000850:	18d0      	adds	r0, r2, r3
 8000852:	bd30      	pop	{r4, r5, pc}
 8000854:	2080      	movs	r0, #128	; 0x80
 8000856:	0340      	lsls	r0, r0, #13
 8000858:	4301      	orrs	r1, r0
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <__aeabi_d2iz+0x60>)
 800085c:	1ac0      	subs	r0, r0, r3
 800085e:	281f      	cmp	r0, #31
 8000860:	dd08      	ble.n	8000874 <__aeabi_d2iz+0x44>
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <__aeabi_d2iz+0x64>)
 8000864:	1ac3      	subs	r3, r0, r3
 8000866:	40d9      	lsrs	r1, r3
 8000868:	000b      	movs	r3, r1
 800086a:	4258      	negs	r0, r3
 800086c:	2a00      	cmp	r2, #0
 800086e:	d1f0      	bne.n	8000852 <__aeabi_d2iz+0x22>
 8000870:	0018      	movs	r0, r3
 8000872:	e7ee      	b.n	8000852 <__aeabi_d2iz+0x22>
 8000874:	4c08      	ldr	r4, [pc, #32]	; (8000898 <__aeabi_d2iz+0x68>)
 8000876:	40c5      	lsrs	r5, r0
 8000878:	46a4      	mov	ip, r4
 800087a:	4463      	add	r3, ip
 800087c:	4099      	lsls	r1, r3
 800087e:	000b      	movs	r3, r1
 8000880:	432b      	orrs	r3, r5
 8000882:	e7f2      	b.n	800086a <__aeabi_d2iz+0x3a>
 8000884:	000003fe 	.word	0x000003fe
 8000888:	0000041d 	.word	0x0000041d
 800088c:	7fffffff 	.word	0x7fffffff
 8000890:	00000433 	.word	0x00000433
 8000894:	00000413 	.word	0x00000413
 8000898:	fffffbed 	.word	0xfffffbed

0800089c <__aeabi_i2d>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	2800      	cmp	r0, #0
 80008a0:	d016      	beq.n	80008d0 <__aeabi_i2d+0x34>
 80008a2:	17c3      	asrs	r3, r0, #31
 80008a4:	18c5      	adds	r5, r0, r3
 80008a6:	405d      	eors	r5, r3
 80008a8:	0fc4      	lsrs	r4, r0, #31
 80008aa:	0028      	movs	r0, r5
 80008ac:	f000 f826 	bl	80008fc <__clzsi2>
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <__aeabi_i2d+0x5c>)
 80008b2:	1a12      	subs	r2, r2, r0
 80008b4:	280a      	cmp	r0, #10
 80008b6:	dc16      	bgt.n	80008e6 <__aeabi_i2d+0x4a>
 80008b8:	0003      	movs	r3, r0
 80008ba:	002e      	movs	r6, r5
 80008bc:	3315      	adds	r3, #21
 80008be:	409e      	lsls	r6, r3
 80008c0:	230b      	movs	r3, #11
 80008c2:	1a18      	subs	r0, r3, r0
 80008c4:	40c5      	lsrs	r5, r0
 80008c6:	0552      	lsls	r2, r2, #21
 80008c8:	032d      	lsls	r5, r5, #12
 80008ca:	0b2d      	lsrs	r5, r5, #12
 80008cc:	0d53      	lsrs	r3, r2, #21
 80008ce:	e003      	b.n	80008d8 <__aeabi_i2d+0x3c>
 80008d0:	2400      	movs	r4, #0
 80008d2:	2300      	movs	r3, #0
 80008d4:	2500      	movs	r5, #0
 80008d6:	2600      	movs	r6, #0
 80008d8:	051b      	lsls	r3, r3, #20
 80008da:	432b      	orrs	r3, r5
 80008dc:	07e4      	lsls	r4, r4, #31
 80008de:	4323      	orrs	r3, r4
 80008e0:	0030      	movs	r0, r6
 80008e2:	0019      	movs	r1, r3
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	380b      	subs	r0, #11
 80008e8:	4085      	lsls	r5, r0
 80008ea:	0552      	lsls	r2, r2, #21
 80008ec:	032d      	lsls	r5, r5, #12
 80008ee:	2600      	movs	r6, #0
 80008f0:	0b2d      	lsrs	r5, r5, #12
 80008f2:	0d53      	lsrs	r3, r2, #21
 80008f4:	e7f0      	b.n	80008d8 <__aeabi_i2d+0x3c>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	0000041e 	.word	0x0000041e

080008fc <__clzsi2>:
 80008fc:	211c      	movs	r1, #28
 80008fe:	2301      	movs	r3, #1
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	4298      	cmp	r0, r3
 8000904:	d301      	bcc.n	800090a <__clzsi2+0xe>
 8000906:	0c00      	lsrs	r0, r0, #16
 8000908:	3910      	subs	r1, #16
 800090a:	0a1b      	lsrs	r3, r3, #8
 800090c:	4298      	cmp	r0, r3
 800090e:	d301      	bcc.n	8000914 <__clzsi2+0x18>
 8000910:	0a00      	lsrs	r0, r0, #8
 8000912:	3908      	subs	r1, #8
 8000914:	091b      	lsrs	r3, r3, #4
 8000916:	4298      	cmp	r0, r3
 8000918:	d301      	bcc.n	800091e <__clzsi2+0x22>
 800091a:	0900      	lsrs	r0, r0, #4
 800091c:	3904      	subs	r1, #4
 800091e:	a202      	add	r2, pc, #8	; (adr r2, 8000928 <__clzsi2+0x2c>)
 8000920:	5c10      	ldrb	r0, [r2, r0]
 8000922:	1840      	adds	r0, r0, r1
 8000924:	4770      	bx	lr
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	02020304 	.word	0x02020304
 800092c:	01010101 	.word	0x01010101
	...

08000938 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_Init+0x3c>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Init+0x3c>)
 800094a:	2140      	movs	r1, #64	; 0x40
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f811 	bl	8000978 <HAL_InitTick>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d003      	beq.n	8000962 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	e001      	b.n	8000966 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000962:	f003 f837 	bl	80039d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	240f      	movs	r4, #15
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_InitTick+0x50>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	22fa      	movs	r2, #250	; 0xfa
 800098e:	0091      	lsls	r1, r2, #2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fbcb 	bl	800012c <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fd48 	bl	800142e <HAL_SYSTICK_Config>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d003      	beq.n	80009aa <HAL_InitTick+0x32>
  {
    status = HAL_ERROR;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e006      	b.n	80009b8 <HAL_InitTick+0x40>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fd26 	bl	8001404 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781b      	ldrb	r3, [r3, #0]
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b005      	add	sp, #20
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000024 	.word	0x20000024

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick++;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_IncTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_IncTick+0x14>)
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	200000a8 	.word	0x200000a8

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	d002      	beq.n	8000a18 <HAL_Delay+0x20>
  {
    wait++;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	f7ff ffe3 	bl	80009e4 <HAL_GetTick>
 8000a1e:	0002      	movs	r2, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d8f7      	bhi.n	8000a1a <HAL_Delay+0x22>
  {
  }
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b004      	add	sp, #16
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e159      	b.n	8000cfa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10a      	bne.n	8000a64 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2250      	movs	r2, #80	; 0x50
 8000a58:	2100      	movs	r1, #0
 8000a5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 ffcc 	bl	80039fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	2210      	movs	r2, #16
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b10      	cmp	r3, #16
 8000a6e:	d005      	beq.n	8000a7c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2204      	movs	r2, #4
 8000a78:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a7a:	d00b      	beq.n	8000a94 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a80:	2210      	movs	r2, #16
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2250      	movs	r2, #80	; 0x50
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e132      	b.n	8000cfa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a98:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <HAL_ADC_Init+0x2d0>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d108      	bne.n	8000ac4 <HAL_ADC_Init+0x90>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <HAL_ADC_Init+0x90>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <HAL_ADC_Init+0x92>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d149      	bne.n	8000b5e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	23c0      	movs	r3, #192	; 0xc0
 8000ad0:	061b      	lsls	r3, r3, #24
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d00b      	beq.n	8000aee <HAL_ADC_Init+0xba>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d005      	beq.n	8000aee <HAL_ADC_Init+0xba>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	061b      	lsls	r3, r3, #24
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d111      	bne.n	8000b12 <HAL_ADC_Init+0xde>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	0892      	lsrs	r2, r2, #2
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6919      	ldr	r1, [r3, #16]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	e014      	b.n	8000b3c <HAL_ADC_Init+0x108>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	691a      	ldr	r2, [r3, #16]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	0892      	lsrs	r2, r2, #2
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	4b79      	ldr	r3, [pc, #484]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b78      	ldr	r3, [pc, #480]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b28:	4978      	ldr	r1, [pc, #480]	; (8000d0c <HAL_ADC_Init+0x2d8>)
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	4b76      	ldr	r3, [pc, #472]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	4b74      	ldr	r3, [pc, #464]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2118      	movs	r1, #24
 8000b48:	438a      	bics	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68d9      	ldr	r1, [r3, #12]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b69      	ldr	r3, [pc, #420]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b64:	496a      	ldr	r1, [pc, #424]	; (8000d10 <HAL_ADC_Init+0x2dc>)
 8000b66:	400a      	ands	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000b6a:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b72:	065a      	lsls	r2, r3, #25
 8000b74:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <HAL_ADC_Init+0x2d4>)
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	055b      	lsls	r3, r3, #21
 8000b84:	4013      	ands	r3, r2
 8000b86:	d108      	bne.n	8000b9a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0549      	lsls	r1, r1, #21
 8000b96:	430a      	orrs	r2, r1
 8000b98:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	495b      	ldr	r1, [pc, #364]	; (8000d14 <HAL_ADC_Init+0x2e0>)
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68d9      	ldr	r1, [r3, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_Init+0x18c>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_Init+0x18e>
 8000bc0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bc2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2020      	movs	r0, #32
 8000bc8:	5c1b      	ldrb	r3, [r3, r0]
 8000bca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000bcc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	202c      	movs	r0, #44	; 0x2c
 8000bd2:	5c1b      	ldrb	r3, [r3, r0]
 8000bd4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bd6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000bdc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000be4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bfa:	23c2      	movs	r3, #194	; 0xc2
 8000bfc:	33ff      	adds	r3, #255	; 0xff
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d00b      	beq.n	8000c1a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68d9      	ldr	r1, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2221      	movs	r2, #33	; 0x21
 8000c1e:	5c9b      	ldrb	r3, [r3, r2]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d11a      	bne.n	8000c5a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2220      	movs	r2, #32
 8000c28:	5c9b      	ldrb	r3, [r3, r2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d109      	bne.n	8000c42 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0249      	lsls	r1, r1, #9
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	e00b      	b.n	8000c5a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c46:	2220      	movs	r2, #32
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	2201      	movs	r2, #1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d11f      	bne.n	8000ca2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	492a      	ldr	r1, [pc, #168]	; (8000d18 <HAL_ADC_Init+0x2e4>)
 8000c6e:	400a      	ands	r2, r1
 8000c70:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6919      	ldr	r1, [r3, #16]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c80:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000c86:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	e00e      	b.n	8000cc0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	438a      	bics	r2, r1
 8000cbe:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2107      	movs	r1, #7
 8000ccc:	438a      	bics	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6959      	ldr	r1, [r3, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cec:	2203      	movs	r2, #3
 8000cee:	4393      	bics	r3, r2
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	fffffefd 	.word	0xfffffefd
 8000d08:	40012708 	.word	0x40012708
 8000d0c:	ffc3ffff 	.word	0xffc3ffff
 8000d10:	fdffffff 	.word	0xfdffffff
 8000d14:	fffe0219 	.word	0xfffe0219
 8000d18:	fffffc03 	.word	0xfffffc03

08000d1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2204      	movs	r2, #4
 8000d34:	4013      	ands	r3, r2
 8000d36:	d138      	bne.n	8000daa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2250      	movs	r2, #80	; 0x50
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_ADC_Start+0x2a>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e038      	b.n	8000db8 <HAL_ADC_Start+0x9c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2250      	movs	r2, #80	; 0x50
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d007      	beq.n	8000d66 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fc      	adds	r4, r7, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f999 	bl	8001094 <ADC_Enable>
 8000d62:	0003      	movs	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d120      	bne.n	8000db2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_ADC_Start+0xa4>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	0052      	lsls	r2, r2, #1
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2250      	movs	r2, #80	; 0x50
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	221c      	movs	r2, #28
 8000d96:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2104      	movs	r1, #4
 8000da4:	430a      	orrs	r2, r1
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	e003      	b.n	8000db2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000daa:	230f      	movs	r3, #15
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db2:	230f      	movs	r3, #15
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b005      	add	sp, #20
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	fffff0fe 	.word	0xfffff0fe

08000dc4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2250      	movs	r2, #80	; 0x50
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Stop+0x1e>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e029      	b.n	8000e36 <HAL_ADC_Stop+0x72>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	2101      	movs	r1, #1
 8000de8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000dea:	250f      	movs	r5, #15
 8000dec:	197c      	adds	r4, r7, r5
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fa0f 	bl	8001214 <ADC_ConversionStop>
 8000df6:	0003      	movs	r3, r0
 8000df8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d112      	bne.n	8000e28 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e02:	197c      	adds	r4, r7, r5
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f9a4 	bl	8001154 <ADC_Disable>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e10:	197b      	adds	r3, r7, r5
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d107      	bne.n	8000e28 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_ADC_Stop+0x7c>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2250      	movs	r2, #80	; 0x50
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	fffffefe 	.word	0xfffffefe

08000e44 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d102      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e014      	b.n	8000e8e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10b      	bne.n	8000e8a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e76:	2220      	movs	r2, #32
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2250      	movs	r2, #80	; 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e06c      	b.n	8000f64 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e8e:	f7ff fda9 	bl	80009e4 <HAL_GetTick>
 8000e92:	0003      	movs	r3, r0
 8000e94:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e96:	e019      	b.n	8000ecc <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	d016      	beq.n	8000ecc <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_PollForConversion+0x70>
 8000ea4:	f7ff fd9e 	bl	80009e4 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d20b      	bcs.n	8000ecc <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb8:	2204      	movs	r2, #4
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2250      	movs	r2, #80	; 0x50
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e04b      	b.n	8000f64 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d0df      	beq.n	8000e98 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	23c0      	movs	r3, #192	; 0xc0
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d12e      	bne.n	8000f52 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d129      	bne.n	8000f52 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2208      	movs	r2, #8
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d122      	bne.n	8000f52 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2204      	movs	r2, #4
 8000f14:	4013      	ands	r3, r2
 8000f16:	d110      	bne.n	8000f3a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	210c      	movs	r1, #12
 8000f24:	438a      	bics	r2, r1
 8000f26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_ADC_PollForConversion+0x128>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2201      	movs	r2, #1
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
 8000f38:	e00b      	b.n	8000f52 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	2220      	movs	r2, #32
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d103      	bne.n	8000f62 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	fffffefe 	.word	0xfffffefe

08000f70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2250      	movs	r2, #80	; 0x50
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x18>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e06c      	b.n	800107a <HAL_ADC_ConfigChannel+0xf2>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2250      	movs	r2, #80	; 0x50
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d00b      	beq.n	8000fcc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	2220      	movs	r2, #32
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2250      	movs	r2, #80	; 0x50
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e056      	b.n	800107a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <HAL_ADC_ConfigChannel+0xfc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d028      	beq.n	8001028 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	035b      	lsls	r3, r3, #13
 8000fe2:	0b5a      	lsrs	r2, r3, #13
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	02db      	lsls	r3, r3, #11
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d009      	beq.n	800100c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0409      	lsls	r1, r1, #16
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001006:	200a      	movs	r0, #10
 8001008:	f000 f94a 	bl	80012a0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d02b      	beq.n	8001070 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	03c9      	lsls	r1, r1, #15
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e023      	b.n	8001070 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	035b      	lsls	r3, r3, #13
 8001034:	0b5b      	lsrs	r3, r3, #13
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	400a      	ands	r2, r1
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	02db      	lsls	r3, r3, #11
 8001048:	4013      	ands	r3, r2
 800104a:	d005      	beq.n	8001058 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <HAL_ADC_ConfigChannel+0x104>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	d005      	beq.n	8001070 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_ADC_ConfigChannel+0x100>)
 800106a:	4909      	ldr	r1, [pc, #36]	; (8001090 <HAL_ADC_ConfigChannel+0x108>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2250      	movs	r2, #80	; 0x50
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	00001001 	.word	0x00001001
 8001088:	40012708 	.word	0x40012708
 800108c:	ff7fffff 	.word	0xff7fffff
 8001090:	ffbfffff 	.word	0xffbfffff

08001094 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2203      	movs	r2, #3
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <ADC_Enable+0x2c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <ADC_Enable+0x2c>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <ADC_Enable+0x2e>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d13f      	bne.n	8001146 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <ADC_Enable+0xbc>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	d00d      	beq.n	80010ee <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	2210      	movs	r2, #16
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	2201      	movs	r2, #1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e02c      	b.n	8001148 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f8ce 	bl	80012a0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001104:	f7ff fc6e 	bl	80009e4 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800110c:	e014      	b.n	8001138 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800110e:	f7ff fc69 	bl	80009e4 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d90d      	bls.n	8001138 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	2210      	movs	r2, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	2201      	movs	r2, #1
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e007      	b.n	8001148 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	2b01      	cmp	r3, #1
 8001144:	d1e3      	bne.n	800110e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	80000017 	.word	0x80000017

08001154 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <ADC_Disable+0x2c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <ADC_Disable+0x2c>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <ADC_Disable+0x2e>
 8001180:	2300      	movs	r3, #0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d041      	beq.n	800120a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2205      	movs	r2, #5
 800118e:	4013      	ands	r3, r2
 8001190:	2b01      	cmp	r3, #1
 8001192:	d110      	bne.n	80011b6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2102      	movs	r1, #2
 80011a0:	430a      	orrs	r2, r1
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fc1a 	bl	80009e4 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011b4:	e022      	b.n	80011fc <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	2210      	movs	r2, #16
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	2201      	movs	r2, #1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e01c      	b.n	800120c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011d2:	f7ff fc07 	bl	80009e4 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d90d      	bls.n	80011fc <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	2210      	movs	r2, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	2201      	movs	r2, #1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e007      	b.n	800120c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	2b01      	cmp	r3, #1
 8001208:	d0e3      	beq.n	80011d2 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b004      	add	sp, #16
 8001212:	bd80      	pop	{r7, pc}

08001214 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	d034      	beq.n	8001296 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2204      	movs	r2, #4
 8001234:	4013      	ands	r3, r2
 8001236:	2b04      	cmp	r3, #4
 8001238:	d10d      	bne.n	8001256 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001244:	d107      	bne.n	8001256 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2110      	movs	r1, #16
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001256:	f7ff fbc5 	bl	80009e4 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800125e:	e014      	b.n	800128a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001260:	f7ff fbc0 	bl	80009e4 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90d      	bls.n	800128a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	2210      	movs	r2, #16
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	2201      	movs	r2, #1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e006      	b.n	8001298 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2204      	movs	r2, #4
 8001292:	4013      	ands	r3, r2
 8001294:	d1e4      	bne.n	8001260 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b004      	add	sp, #16
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <ADC_DelayMicroSecond+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	490b      	ldr	r1, [pc, #44]	; (80012dc <ADC_DelayMicroSecond+0x3c>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7fe ff3c 	bl	800012c <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	001a      	movs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4353      	muls	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80012be:	e002      	b.n	80012c6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f9      	bne.n	80012c0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000024 	.word	0x20000024
 80012dc:	000f4240 	.word	0x000f4240

080012e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	0002      	movs	r2, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b7f      	cmp	r3, #127	; 0x7f
 80012f4:	d932      	bls.n	800135c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <NVIC_SetPriority+0xd4>)
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	230f      	movs	r3, #15
 8001300:	400b      	ands	r3, r1
 8001302:	3b08      	subs	r3, #8
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3306      	adds	r3, #6
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	18d3      	adds	r3, r2, r3
 800130c:	3304      	adds	r3, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1dfa      	adds	r2, r7, #7
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	0011      	movs	r1, r2
 8001316:	2203      	movs	r2, #3
 8001318:	400a      	ands	r2, r1
 800131a:	00d2      	lsls	r2, r2, #3
 800131c:	21ff      	movs	r1, #255	; 0xff
 800131e:	4091      	lsls	r1, r2
 8001320:	000a      	movs	r2, r1
 8001322:	43d2      	mvns	r2, r2
 8001324:	401a      	ands	r2, r3
 8001326:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	019b      	lsls	r3, r3, #6
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	401a      	ands	r2, r3
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	2303      	movs	r3, #3
 8001338:	4003      	ands	r3, r0
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <NVIC_SetPriority+0xd4>)
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	001c      	movs	r4, r3
 8001346:	230f      	movs	r3, #15
 8001348:	4023      	ands	r3, r4
 800134a:	3b08      	subs	r3, #8
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	430a      	orrs	r2, r1
 8001350:	3306      	adds	r3, #6
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	18c3      	adds	r3, r0, r3
 8001356:	3304      	adds	r3, #4
 8001358:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800135a:	e027      	b.n	80013ac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b25b      	sxtb	r3, r3
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	33c0      	adds	r3, #192	; 0xc0
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	589b      	ldr	r3, [r3, r2]
 800136c:	1dfa      	adds	r2, r7, #7
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	0011      	movs	r1, r2
 8001372:	2203      	movs	r2, #3
 8001374:	400a      	ands	r2, r1
 8001376:	00d2      	lsls	r2, r2, #3
 8001378:	21ff      	movs	r1, #255	; 0xff
 800137a:	4091      	lsls	r1, r2
 800137c:	000a      	movs	r2, r1
 800137e:	43d2      	mvns	r2, r2
 8001380:	401a      	ands	r2, r3
 8001382:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	019b      	lsls	r3, r3, #6
 8001388:	22ff      	movs	r2, #255	; 0xff
 800138a:	401a      	ands	r2, r3
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	0018      	movs	r0, r3
 8001392:	2303      	movs	r3, #3
 8001394:	4003      	ands	r3, r0
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <NVIC_SetPriority+0xd8>)
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	430a      	orrs	r2, r1
 80013a6:	33c0      	adds	r3, #192	; 0xc0
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	501a      	str	r2, [r3, r0]
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b003      	add	sp, #12
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	e000e100 	.word	0xe000e100

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	045b      	lsls	r3, r3, #17
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d301      	bcc.n	80013d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d0:	2301      	movs	r3, #1
 80013d2:	e010      	b.n	80013f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <SysTick_Config+0x44>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	3a01      	subs	r2, #1
 80013da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
 80013e0:	2103      	movs	r1, #3
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff ff7c 	bl	80012e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x44>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x44>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	210f      	movs	r1, #15
 8001410:	187b      	adds	r3, r7, r1
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	187b      	adds	r3, r7, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff ff5d 	bl	80012e0 <NVIC_SetPriority>
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ffbf 	bl	80013bc <SysTick_Config>
 800143e:	0003      	movs	r3, r0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800145e:	e14f      	b.n	8001700 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4091      	lsls	r1, r2
 800146a:	000a      	movs	r2, r1
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d100      	bne.n	8001478 <HAL_GPIO_Init+0x30>
 8001476:	e140      	b.n	80016fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b12      	cmp	r3, #18
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	409a      	lsls	r2, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2107      	movs	r1, #7
 80014b4:	400b      	ands	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	409a      	lsls	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	6939      	ldr	r1, [r7, #16]
 80014ce:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d00b      	beq.n	80014f0 <HAL_GPIO_Init+0xa8>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e4:	2b11      	cmp	r3, #17
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b12      	cmp	r3, #18
 80014ee:	d130      	bne.n	8001552 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001526:	2201      	movs	r2, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	2201      	movs	r2, #1
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	401a      	ands	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	4013      	ands	r3, r2
 80015c0:	d100      	bne.n	80015c4 <HAL_GPIO_Init+0x17c>
 80015c2:	e09a      	b.n	80016fa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <HAL_GPIO_Init+0x2d0>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_GPIO_Init+0x2d0>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_GPIO_Init+0x2d4>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	589b      	ldr	r3, [r3, r2]
 80015dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2203      	movs	r2, #3
 80015e2:	4013      	ands	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	409a      	lsls	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	23a0      	movs	r3, #160	; 0xa0
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x1ea>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_GPIO_Init+0x2d8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x1e6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_GPIO_Init+0x2dc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x1e2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x2e0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x1de>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_GPIO_Init+0x2e4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x1da>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x1ec>
 8001622:	2306      	movs	r3, #6
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x1ec>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x1ec>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x1ec>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x1ec>
 8001632:	2300      	movs	r3, #0
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	2103      	movs	r1, #3
 8001638:	400a      	ands	r2, r1
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_GPIO_Init+0x2d4>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43da      	mvns	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	035b      	lsls	r3, r3, #13
 80016be:	4013      	ands	r3, r2
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_GPIO_Init+0x2e8>)
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	40da      	lsrs	r2, r3
 8001708:	1e13      	subs	r3, r2, #0
 800170a:	d000      	beq.n	800170e <HAL_GPIO_Init+0x2c6>
 800170c:	e6a8      	b.n	8001460 <HAL_GPIO_Init+0x18>
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b006      	add	sp, #24
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	50000400 	.word	0x50000400
 8001724:	50000800 	.word	0x50000800
 8001728:	50000c00 	.word	0x50000c00
 800172c:	50001c00 	.word	0x50001c00
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cbb      	adds	r3, r7, #2
 8001740:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	1cba      	adds	r2, r7, #2
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	4013      	ands	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e003      	b.n	8001760 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001758:	230f      	movs	r3, #15
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001760:	230f      	movs	r3, #15
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	781b      	ldrb	r3, [r3, #0]
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	0008      	movs	r0, r1
 8001778:	0011      	movs	r1, r2
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	1c02      	adds	r2, r0, #0
 800177e:	801a      	strh	r2, [r3, #0]
 8001780:	1c7b      	adds	r3, r7, #1
 8001782:	1c0a      	adds	r2, r1, #0
 8001784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001786:	1c7b      	adds	r3, r7, #1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	1cbb      	adds	r3, r7, #2
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001796:	e003      	b.n	80017a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f000 fbab 	bl	8001f12 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017bc:	4bce      	ldr	r3, [pc, #824]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c6:	4bcc      	ldr	r3, [pc, #816]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	4013      	ands	r3, r2
 80017d0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d100      	bne.n	80017de <HAL_RCC_OscConfig+0x36>
 80017dc:	e07e      	b.n	80018dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d007      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x68>
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	4bc0      	ldr	r3, [pc, #768]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_OscConfig+0x5a>
 8001800:	e06b      	b.n	80018da <HAL_RCC_OscConfig+0x132>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d167      	bne.n	80018da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f000 fb81 	bl	8001f12 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	429a      	cmp	r2, r3
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x84>
 800181c:	4bb6      	ldr	r3, [pc, #728]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4bb5      	ldr	r3, [pc, #724]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0249      	lsls	r1, r1, #9
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e027      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	23a0      	movs	r3, #160	; 0xa0
 8001832:	02db      	lsls	r3, r3, #11
 8001834:	429a      	cmp	r2, r3
 8001836:	d10e      	bne.n	8001856 <HAL_RCC_OscConfig+0xae>
 8001838:	4baf      	ldr	r3, [pc, #700]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4bae      	ldr	r3, [pc, #696]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	02c9      	lsls	r1, r1, #11
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0249      	lsls	r1, r1, #9
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e012      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001856:	4ba8      	ldr	r3, [pc, #672]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4ba7      	ldr	r3, [pc, #668]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800185c:	49a7      	ldr	r1, [pc, #668]	; (8001afc <HAL_RCC_OscConfig+0x354>)
 800185e:	400a      	ands	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	4ba5      	ldr	r3, [pc, #660]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001876:	49a2      	ldr	r1, [pc, #648]	; (8001b00 <HAL_RCC_OscConfig+0x358>)
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d015      	beq.n	80018b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f8ae 	bl	80009e4 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188c:	e009      	b.n	80018a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7ff f8a9 	bl	80009e4 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d902      	bls.n	80018a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	f000 fb38 	bl	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a2:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0ef      	beq.n	800188e <HAL_RCC_OscConfig+0xe6>
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f898 	bl	80009e4 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff f893 	bl	80009e4 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e322      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018cc:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x112>
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x140>
 80018e6:	e08a      	b.n	80019fe <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d13d      	bne.n	8001976 <HAL_RCC_OscConfig+0x1ce>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13a      	bne.n	8001976 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001900:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2204      	movs	r2, #4
 8001906:	4013      	ands	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_RCC_OscConfig+0x16c>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e2fe      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x35c>)
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	021a      	lsls	r2, r3, #8
 8001924:	4b74      	ldr	r3, [pc, #464]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2209      	movs	r2, #9
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193c:	f000 fc1e 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8001940:	0001      	movs	r1, r0
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	220f      	movs	r2, #15
 800194a:	4013      	ands	r3, r2
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x360>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	000a      	movs	r2, r1
 8001952:	40da      	lsrs	r2, r3
 8001954:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_OscConfig+0x364>)
 8001956:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001958:	2513      	movs	r5, #19
 800195a:	197c      	adds	r4, r7, r5
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f80b 	bl	8000978 <HAL_InitTick>
 8001962:	0003      	movs	r3, r0
 8001964:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001966:	002a      	movs	r2, r5
 8001968:	18bb      	adds	r3, r7, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d046      	beq.n	80019fe <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8001970:	18bb      	adds	r3, r7, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	e2cd      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d027      	beq.n	80019cc <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2209      	movs	r2, #9
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f829 	bl	80009e4 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f824 	bl	80009e4 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e2b3      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f1      	beq.n	8001998 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_RCC_OscConfig+0x35c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e018      	b.n	80019fe <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f804 	bl	80009e4 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e2:	f7fe ffff 	bl	80009e4 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e28e      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1f1      	bne.n	80019e2 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2210      	movs	r2, #16
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x262>
 8001a08:	e09e      	b.n	8001b48 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d13f      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a10:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x280>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e274      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a28:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_RCC_OscConfig+0x368>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	0a19      	lsrs	r1, r3, #8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	061a      	lsls	r2, r3, #24
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	0b5b      	lsrs	r3, r3, #13
 8001a56:	3301      	adds	r3, #1
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	0212      	lsls	r2, r2, #8
 8001a5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	210f      	movs	r1, #15
 8001a66:	400b      	ands	r3, r1
 8001a68:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x360>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x364>)
 8001a70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a72:	2513      	movs	r5, #19
 8001a74:	197c      	adds	r4, r7, r5
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7fe ff7e 	bl	8000978 <HAL_InitTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a80:	002a      	movs	r2, r5
 8001a82:	18bb      	adds	r3, r7, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d05e      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8001a8a:	18bb      	adds	r3, r7, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	e240      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d03d      	beq.n	8001b14 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0049      	lsls	r1, r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7fe ff9d 	bl	80009e4 <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab0:	f7fe ff98 	bl	80009e4 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e227      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_RCC_OscConfig+0x368>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	0a19      	lsrs	r1, r3, #8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	061a      	lsls	r2, r3, #24
 8001af0:	4b01      	ldr	r3, [pc, #4]	; (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e027      	b.n	8001b48 <HAL_RCC_OscConfig+0x3a0>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	fffbffff 	.word	0xfffbffff
 8001b04:	ffffe0ff 	.word	0xffffe0ff
 8001b08:	0800460c 	.word	0x0800460c
 8001b0c:	20000024 	.word	0x20000024
 8001b10:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b14:	4bbd      	ldr	r3, [pc, #756]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4bbc      	ldr	r3, [pc, #752]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b1a:	49bd      	ldr	r1, [pc, #756]	; (8001e10 <HAL_RCC_OscConfig+0x668>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe ff60 	bl	80009e4 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2a:	f7fe ff5b 	bl	80009e4 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1ea      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b3c:	4bb3      	ldr	r3, [pc, #716]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4bac      	ldr	r3, [pc, #688]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5e:	4bab      	ldr	r3, [pc, #684]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe ff3d 	bl	80009e4 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ff38 	bl	80009e4 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1c7      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b82:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3c8>
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b9f      	ldr	r3, [pc, #636]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b92:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	438a      	bics	r2, r1
 8001b98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7fe ff23 	bl	80009e4 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff1e 	bl	80009e4 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ad      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bb6:	4b95      	ldr	r3, [pc, #596]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d1f1      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x424>
 8001bca:	e0ae      	b.n	8001d2a <HAL_RCC_OscConfig+0x582>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2027      	movs	r0, #39	; 0x27
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	055b      	lsls	r3, r3, #21
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x44c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0549      	lsls	r1, r1, #21
 8001bea:	430a      	orrs	r2, r1
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d11a      	bne.n	8001c36 <HAL_RCC_OscConfig+0x48e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <HAL_RCC_OscConfig+0x66c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x66c>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0049      	lsls	r1, r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe fee9 	bl	80009e4 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x482>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe fee4 	bl	80009e4 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x482>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e173      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x470>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c46:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0049      	lsls	r1, r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c50:	e031      	b.n	8001cb6 <HAL_RCC_OscConfig+0x50e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4cc>
 8001c5a:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5e:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c60:	496b      	ldr	r1, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x668>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
 8001c66:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6a:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c6c:	496a      	ldr	r1, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x670>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	651a      	str	r2, [r3, #80]	; 0x50
 8001c72:	e020      	b.n	8001cb6 <HAL_RCC_OscConfig+0x50e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	23a0      	movs	r3, #160	; 0xa0
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0x4f6>
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	00c9      	lsls	r1, r1, #3
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c8e:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c92:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0049      	lsls	r1, r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x50e>
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001ca4:	495a      	ldr	r1, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x668>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001cb0:	4959      	ldr	r1, [pc, #356]	; (8001e18 <HAL_RCC_OscConfig+0x670>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x542>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fe91 	bl	80009e4 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x534>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fe8c 	bl	80009e4 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x674>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x534>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e11a      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x520>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fe7b 	bl	80009e4 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fe76 	bl	80009e4 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x674>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e104      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1ef      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d14:	2327      	movs	r3, #39	; 0x27
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0x582>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d22:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d24:	493e      	ldr	r1, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x678>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d049      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x620>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d026      	beq.n	8001d8a <HAL_RCC_OscConfig+0x5e2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0189      	lsls	r1, r1, #6
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fe3f 	bl	80009e4 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x5d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6c:	f7fe fe3a 	bl	80009e4 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c9      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x5c4>
 8001d88:	e01e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x620>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001d90:	2101      	movs	r1, #1
 8001d92:	438a      	bics	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_RCC_OscConfig+0x67c>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x680>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fe1f 	bl	80009e4 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dac:	f7fe fe1a 	bl	80009e4 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0a9      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x604>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
 8001dd0:	e09e      	b.n	8001f10 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d100      	bne.n	8001dda <HAL_RCC_OscConfig+0x632>
 8001dd8:	e077      	b.n	8001eca <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d158      	bne.n	8001e94 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x664>)
 8001de8:	4910      	ldr	r1, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x684>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fdf9 	bl	80009e4 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001df6:	e01b      	b.n	8001e30 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fdf4 	bl	80009e4 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d914      	bls.n	8001e30 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e083      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	fffffeff 	.word	0xfffffeff
 8001e14:	40007000 	.word	0x40007000
 8001e18:	fffffbff 	.word	0xfffffbff
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	efffffff 	.word	0xefffffff
 8001e24:	40010000 	.word	0x40010000
 8001e28:	ffffdfff 	.word	0xffffdfff
 8001e2c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	049b      	lsls	r3, r3, #18
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1dd      	bne.n	8001df8 <HAL_RCC_OscConfig+0x650>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <HAL_RCC_OscConfig+0x778>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	431a      	orrs	r2, r3
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0449      	lsls	r1, r1, #17
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fdbb 	bl	80009e4 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe fdb6 	bl	80009e4 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e045      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x6cc>
 8001e92:	e03d      	b.n	8001f10 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001e9a:	4922      	ldr	r1, [pc, #136]	; (8001f24 <HAL_RCC_OscConfig+0x77c>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fda0 	bl	80009e4 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fd9b 	bl	80009e4 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e02a      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	049b      	lsls	r3, r3, #18
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x702>
 8001ec8:	e022      	b.n	8001f10 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01d      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_OscConfig+0x774>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10f      	bne.n	8001f0c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	23f0      	movs	r3, #240	; 0xf0
 8001ef0:	039b      	lsls	r3, r3, #14
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b00a      	add	sp, #40	; 0x28
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	ff02ffff 	.word	0xff02ffff
 8001f24:	feffffff 	.word	0xfeffffff

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e10d      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d911      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0f4      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	22f0      	movs	r2, #240	; 0xf0
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x70>
 8001f96:	e089      	b.n	80020ac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fa0:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d120      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d3      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	049b      	lsls	r3, r3, #18
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d114      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0c7      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d109      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0bc      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0b4      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002002:	f7fe fcef 	bl	80009e4 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d111      	bne.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002012:	e009      	b.n	8002028 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fce6 	bl	80009e4 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_RCC_ClockConfig+0x240>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e097      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	220c      	movs	r2, #12
 800202e:	4013      	ands	r3, r2
 8002030:	2b08      	cmp	r3, #8
 8002032:	d1ef      	bne.n	8002014 <HAL_RCC_ClockConfig+0xec>
 8002034:	e03a      	b.n	80020ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d111      	bne.n	8002062 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	e009      	b.n	8002054 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fcd0 	bl	80009e4 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x240>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e081      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	220c      	movs	r2, #12
 800205a:	4013      	ands	r3, r2
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d1ef      	bne.n	8002040 <HAL_RCC_ClockConfig+0x118>
 8002060:	e024      	b.n	80020ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d11b      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800206a:	e009      	b.n	8002080 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe fcba 	bl	80009e4 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_RCC_ClockConfig+0x240>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e06b      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	220c      	movs	r2, #12
 8002086:	4013      	ands	r3, r2
 8002088:	2b04      	cmp	r3, #4
 800208a:	d1ef      	bne.n	800206c <HAL_RCC_ClockConfig+0x144>
 800208c:	e00e      	b.n	80020ac <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7fe fca9 	bl	80009e4 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_RCC_ClockConfig+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e05a      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	220c      	movs	r2, #12
 80020a8:	4013      	ands	r3, r2
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d211      	bcs.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_ClockConfig+0x238>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e03c      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2208      	movs	r2, #8
 8002102:	4013      	ands	r3, r2
 8002104:	d00a      	beq.n	800211c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_RCC_ClockConfig+0x248>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00da      	lsls	r2, r3, #3
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800211c:	f000 f82e 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002120:	0001      	movs	r1, r0
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_ClockConfig+0x23c>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	220f      	movs	r2, #15
 800212a:	4013      	ands	r3, r2
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_RCC_ClockConfig+0x24c>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	000a      	movs	r2, r1
 8002132:	40da      	lsrs	r2, r3
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_ClockConfig+0x250>)
 8002136:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002138:	250b      	movs	r5, #11
 800213a:	197c      	adds	r4, r7, r5
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fc1b 	bl	8000978 <HAL_InitTick>
 8002142:	0003      	movs	r3, r0
 8002144:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002146:	002a      	movs	r2, r5
 8002148:	18bb      	adds	r3, r7, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002150:	18bb      	adds	r3, r7, r2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	e000      	b.n	8002158 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bdb0      	pop	{r4, r5, r7, pc}
 8002160:	40022000 	.word	0x40022000
 8002164:	40021000 	.word	0x40021000
 8002168:	00001388 	.word	0x00001388
 800216c:	fffff8ff 	.word	0xfffff8ff
 8002170:	ffffc7ff 	.word	0xffffc7ff
 8002174:	0800460c 	.word	0x0800460c
 8002178:	20000024 	.word	0x20000024

0800217c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	220c      	movs	r2, #12
 800218c:	4013      	ands	r3, r2
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d013      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x3e>
 8002192:	d85c      	bhi.n	800224e <HAL_RCC_GetSysClockFreq+0xd2>
 8002194:	2b04      	cmp	r3, #4
 8002196:	d002      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x22>
 8002198:	2b08      	cmp	r3, #8
 800219a:	d00b      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x38>
 800219c:	e057      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2210      	movs	r2, #16
 80021a4:	4013      	ands	r3, r2
 80021a6:	d002      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021aa:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80021ac:	e05d      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_GetSysClockFreq+0x100>)
 80021b0:	613b      	str	r3, [r7, #16]
      break;
 80021b2:	e05a      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_GetSysClockFreq+0x104>)
 80021b6:	613b      	str	r3, [r7, #16]
      break;
 80021b8:	e057      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	220f      	movs	r2, #15
 80021c0:	4013      	ands	r3, r2
 80021c2:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	0d9b      	lsrs	r3, r3, #22
 80021cc:	2203      	movs	r2, #3
 80021ce:	4013      	ands	r3, r2
 80021d0:	3301      	adds	r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	4013      	ands	r3, r2
 80021de:	d00f      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	000a      	movs	r2, r1
 80021e4:	0152      	lsls	r2, r2, #5
 80021e6:	1a52      	subs	r2, r2, r1
 80021e8:	0193      	lsls	r3, r2, #6
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	185b      	adds	r3, r3, r1
 80021f0:	025b      	lsls	r3, r3, #9
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fd ff99 	bl	800012c <__udivsi3>
 80021fa:	0003      	movs	r3, r0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e023      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d00f      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	000a      	movs	r2, r1
 800220e:	0152      	lsls	r2, r2, #5
 8002210:	1a52      	subs	r2, r2, r1
 8002212:	0193      	lsls	r3, r2, #6
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	185b      	adds	r3, r3, r1
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f7fd ff84 	bl	800012c <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00e      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	000a      	movs	r2, r1
 800222e:	0152      	lsls	r2, r2, #5
 8002230:	1a52      	subs	r2, r2, r1
 8002232:	0193      	lsls	r3, r2, #6
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	185b      	adds	r3, r3, r1
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f7fd ff74 	bl	800012c <__udivsi3>
 8002244:	0003      	movs	r3, r0
 8002246:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e00d      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0b5b      	lsrs	r3, r3, #13
 8002254:	2207      	movs	r2, #7
 8002256:	4013      	ands	r3, r2
 8002258:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	409a      	lsls	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
      break;
 8002268:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800226a:	693b      	ldr	r3, [r7, #16]
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b006      	add	sp, #24
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	003d0900 	.word	0x003d0900
 800227c:	00f42400 	.word	0x00f42400
 8002280:	007a1200 	.word	0x007a1200
 8002284:	0800461c 	.word	0x0800461c

08002288 <led_ring_bit>:
 */

#include "main.h"
#include "control_hardware.h"

void led_ring_bit(uint8_t x) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	0002      	movs	r2, r0
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	701a      	strb	r2, [r3, #0]
  if(x) {
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <led_ring_bit+0x40>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 800229c:	23a0      	movs	r3, #160	; 0xa0
 800229e:	05db      	lsls	r3, r3, #23
 80022a0:	2220      	movs	r2, #32
 80022a2:	619a      	str	r2, [r3, #24]
    NS800;
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 80022be:	23a0      	movs	r3, #160	; 0xa0
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	2220      	movs	r2, #32
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
  else {
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
    NS400;
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
  }
}
 80022c6:	e00c      	b.n	80022e2 <led_ring_bit+0x5a>
    LED_RING_GPIO_Port->BSRR = LED_RING_Pin;
 80022c8:	23a0      	movs	r3, #160	; 0xa0
 80022ca:	05db      	lsls	r3, r3, #23
 80022cc:	2220      	movs	r2, #32
 80022ce:	619a      	str	r2, [r3, #24]
    NS400;
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46c0      	nop			; (mov r8, r8)
    LED_RING_GPIO_Port->BRR = LED_RING_Pin;
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	2220      	movs	r2, #32
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <led_ring_update>:

void led_ring_update(uint32_t *data_24bit)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b0cc      	sub	sp, #304	; 0x130
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    uint16_t i;
    uint8_t data_bit[288];

    for(i=0; i<288; i++)
 80022f4:	2397      	movs	r3, #151	; 0x97
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e02b      	b.n	8002358 <led_ring_update+0x6c>
    {
        data_bit[i]=data_24bit[i/24]>>(23-(i%24))&1;
 8002300:	2597      	movs	r5, #151	; 0x97
 8002302:	006d      	lsls	r5, r5, #1
 8002304:	197b      	adds	r3, r7, r5
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2118      	movs	r1, #24
 800230a:	0018      	movs	r0, r3
 800230c:	f7fd ff0e 	bl	800012c <__udivsi3>
 8002310:	0003      	movs	r3, r0
 8002312:	b29b      	uxth	r3, r3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	197b      	adds	r3, r7, r5
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	2118      	movs	r1, #24
 8002322:	0018      	movs	r0, r3
 8002324:	f7fd ff88 	bl	8000238 <__aeabi_uidivmod>
 8002328:	000b      	movs	r3, r1
 800232a:	b29b      	uxth	r3, r3
 800232c:	001a      	movs	r2, r3
 800232e:	2317      	movs	r3, #23
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	40dc      	lsrs	r4, r3
 8002334:	0023      	movs	r3, r4
 8002336:	b2da      	uxtb	r2, r3
 8002338:	197b      	adds	r3, r7, r5
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	400a      	ands	r2, r1
 8002340:	b2d1      	uxtb	r1, r2
 8002342:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <led_ring_update+0xc8>)
 8002344:	2098      	movs	r0, #152	; 0x98
 8002346:	0040      	lsls	r0, r0, #1
 8002348:	1812      	adds	r2, r2, r0
 800234a:	19d2      	adds	r2, r2, r7
 800234c:	54d1      	strb	r1, [r2, r3]
    for(i=0; i<288; i++)
 800234e:	197b      	adds	r3, r7, r5
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	197b      	adds	r3, r7, r5
 8002354:	3201      	adds	r2, #1
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	2197      	movs	r1, #151	; 0x97
 800235a:	0049      	lsls	r1, r1, #1
 800235c:	187b      	adds	r3, r7, r1
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	2390      	movs	r3, #144	; 0x90
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	429a      	cmp	r2, r3
 8002366:	d3cb      	bcc.n	8002300 <led_ring_update+0x14>
    }

    for(i=0; i<288; i++)
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	e011      	b.n	8002394 <led_ring_update+0xa8>
    {
        led_ring_bit(data_bit[i]);
 8002370:	2497      	movs	r4, #151	; 0x97
 8002372:	0064      	lsls	r4, r4, #1
 8002374:	193b      	adds	r3, r7, r4
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <led_ring_update+0xc8>)
 800237a:	2198      	movs	r1, #152	; 0x98
 800237c:	0049      	lsls	r1, r1, #1
 800237e:	1852      	adds	r2, r2, r1
 8002380:	19d2      	adds	r2, r2, r7
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ff7f 	bl	8002288 <led_ring_bit>
    for(i=0; i<288; i++)
 800238a:	193b      	adds	r3, r7, r4
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	193b      	adds	r3, r7, r4
 8002390:	3201      	adds	r2, #1
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	2397      	movs	r3, #151	; 0x97
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	2390      	movs	r3, #144	; 0x90
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3e5      	bcc.n	8002370 <led_ring_update+0x84>
    }

    HAL_Delay(1);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7fe fb27 	bl	80009f8 <HAL_Delay>
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b04c      	add	sp, #304	; 0x130
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	fffffedc 	.word	0xfffffedc

080023b8 <led_ring_rgb>:

uint32_t led_ring_rgb(uint8_t red, uint8_t green, uint8_t blue)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	0004      	movs	r4, r0
 80023c0:	0008      	movs	r0, r1
 80023c2:	0011      	movs	r1, r2
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	1c22      	adds	r2, r4, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	1dbb      	adds	r3, r7, #6
 80023cc:	1c02      	adds	r2, r0, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	1d7b      	adds	r3, r7, #5
 80023d2:	1c0a      	adds	r2, r1, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  uint32_t data_24bit;

    data_24bit = (uint32_t)blue;
 80023d6:	1d7b      	adds	r3, r7, #5
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)red<<8;
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    data_24bit |= (uint32_t)green<<16;
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

    return data_24bit;
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b005      	add	sp, #20
 80023fc:	bd90      	pop	{r4, r7, pc}
	...

08002400 <LcdReadByte>:
#define LCD_D6(x) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)x)
#define LCD_D7(x) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)x)

const uint8_t LCD_INIT_STRING[4] = {0x28, 0x0C, 0x01, 0x06};

uint8_t LcdReadByte() {
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t lcdBusy;
  
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8002406:	003b      	movs	r3, r7
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	003b      	movs	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	003b      	movs	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8002418:	003b      	movs	r3, r7
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <LcdReadByte+0xa4>)
 800241c:	0019      	movs	r1, r3
 800241e:	0010      	movs	r0, r2
 8002420:	f7ff f812 	bl	8001448 <HAL_GPIO_Init>
  
  LCD_RW(1); LCD_EN(1);
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <LcdReadByte+0xa4>)
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff f99f 	bl	800176e <HAL_GPIO_WritePin>
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <LcdReadByte+0xa4>)
 8002432:	2201      	movs	r2, #1
 8002434:	2108      	movs	r1, #8
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff f999 	bl	800176e <HAL_GPIO_WritePin>
  lcdBusy = HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin);
 800243c:	2517      	movs	r5, #23
 800243e:	197c      	adds	r4, r7, r5
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <LcdReadByte+0xa4>)
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff f975 	bl	8001734 <HAL_GPIO_ReadPin>
 800244a:	0003      	movs	r3, r0
 800244c:	7023      	strb	r3, [r4, #0]
  
  LCD_EN(0); LCD_EN(1); LCD_EN(0);
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <LcdReadByte+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	2108      	movs	r1, #8
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff f98a 	bl	800176e <HAL_GPIO_WritePin>
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <LcdReadByte+0xa4>)
 800245c:	2201      	movs	r2, #1
 800245e:	2108      	movs	r1, #8
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff f984 	bl	800176e <HAL_GPIO_WritePin>
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <LcdReadByte+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	2108      	movs	r1, #8
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff f97e 	bl	800176e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8002472:	003b      	movs	r3, r7
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	003b      	movs	r3, r7
 800247a:	2201      	movs	r2, #1
 800247c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	003b      	movs	r3, r7
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	003b      	movs	r3, r7
 8002486:	2203      	movs	r2, #3
 8002488:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 800248a:	003b      	movs	r3, r7
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <LcdReadByte+0xa4>)
 800248e:	0019      	movs	r1, r3
 8002490:	0010      	movs	r0, r2
 8002492:	f7fe ffd9 	bl	8001448 <HAL_GPIO_Init>
  
  return lcdBusy;
 8002496:	197b      	adds	r3, r7, r5
 8002498:	781b      	ldrb	r3, [r3, #0]
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b006      	add	sp, #24
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	50000400 	.word	0x50000400

080024a8 <LcdSendNibble>:

void LcdSendNibble(uint8_t n) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	0002      	movs	r2, r0
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	701a      	strb	r2, [r3, #0]
  LCD_D4(n >> 0 & 1);
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <LcdSendNibble+0x88>)
 80024c0:	001a      	movs	r2, r3
 80024c2:	2110      	movs	r1, #16
 80024c4:	f7ff f953 	bl	800176e <HAL_GPIO_WritePin>
  LCD_D5(n >> 1 & 1);
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4816      	ldr	r0, [pc, #88]	; (8002530 <LcdSendNibble+0x88>)
 80024d8:	001a      	movs	r2, r3
 80024da:	2120      	movs	r1, #32
 80024dc:	f7ff f947 	bl	800176e <HAL_GPIO_WritePin>
  LCD_D6(n >> 2 & 1);
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4810      	ldr	r0, [pc, #64]	; (8002530 <LcdSendNibble+0x88>)
 80024f0:	001a      	movs	r2, r3
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	f7ff f93b 	bl	800176e <HAL_GPIO_WritePin>
  LCD_D7(n >> 3 & 1);
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	b2db      	uxtb	r3, r3
 8002506:	480a      	ldr	r0, [pc, #40]	; (8002530 <LcdSendNibble+0x88>)
 8002508:	001a      	movs	r2, r3
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	f7ff f92f 	bl	800176e <HAL_GPIO_WritePin>
  LCD_EN(1); LCD_EN(0);
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <LcdSendNibble+0x88>)
 8002512:	2201      	movs	r2, #1
 8002514:	2108      	movs	r1, #8
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff f929 	bl	800176e <HAL_GPIO_WritePin>
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <LcdSendNibble+0x88>)
 800251e:	2200      	movs	r2, #0
 8002520:	2108      	movs	r1, #8
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff f923 	bl	800176e <HAL_GPIO_WritePin>
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	50000400 	.word	0x50000400

08002534 <LcdSendByte>:

void LcdSendByte(uint8_t address, uint8_t n) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	0002      	movs	r2, r0
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	1c0a      	adds	r2, r1, #0
 8002544:	701a      	strb	r2, [r3, #0]
  LCD_RS(0);
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <LcdSendByte+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	2101      	movs	r1, #1
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff f90e 	bl	800176e <HAL_GPIO_WritePin>
  while(LcdReadByte());
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	f7ff ff54 	bl	8002400 <LcdReadByte>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d1fb      	bne.n	8002554 <LcdSendByte+0x20>
  LCD_RS(address);
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <LcdSendByte+0x74>)
 8002562:	001a      	movs	r2, r3
 8002564:	2101      	movs	r1, #1
 8002566:	f7ff f902 	bl	800176e <HAL_GPIO_WritePin>
  LCD_RW(0); LCD_EN(0);
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <LcdSendByte+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	2102      	movs	r1, #2
 8002570:	0018      	movs	r0, r3
 8002572:	f7ff f8fc 	bl	800176e <HAL_GPIO_WritePin>
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <LcdSendByte+0x74>)
 8002578:	2200      	movs	r2, #0
 800257a:	2108      	movs	r1, #8
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff f8f6 	bl	800176e <HAL_GPIO_WritePin>
  LcdSendNibble(n >> 4);
 8002582:	1dbb      	adds	r3, r7, #6
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	b2db      	uxtb	r3, r3
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff ff8c 	bl	80024a8 <LcdSendNibble>
  LcdSendNibble(n & 0x0F);
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	220f      	movs	r2, #15
 8002596:	4013      	ands	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff ff84 	bl	80024a8 <LcdSendNibble>
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	50000400 	.word	0x50000400

080025ac <LcdInit>:

void LcdInit() {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  uint8_t i;
  LCD_RS(0); LCD_RW(0); LCD_EN(0);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <LcdInit+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2101      	movs	r1, #1
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff f8d8 	bl	800176e <HAL_GPIO_WritePin>
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <LcdInit+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	2102      	movs	r1, #2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff f8d2 	bl	800176e <HAL_GPIO_WritePin>
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <LcdInit+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	2108      	movs	r1, #8
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff f8cc 	bl	800176e <HAL_GPIO_WritePin>
  HAL_Delay(15);
 80025d6:	200f      	movs	r0, #15
 80025d8:	f7fe fa0e 	bl	80009f8 <HAL_Delay>
  for(i=0; i<3; i++) {
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e00a      	b.n	80025fa <LcdInit+0x4e>
    LcdSendNibble(3);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f7ff ff5f 	bl	80024a8 <LcdSendNibble>
    HAL_Delay(5);
 80025ea:	2005      	movs	r0, #5
 80025ec:	f7fe fa04 	bl	80009f8 <HAL_Delay>
  for(i=0; i<3; i++) {
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	3201      	adds	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d9f0      	bls.n	80025e4 <LcdInit+0x38>
  }
  LcdSendNibble(2);
 8002602:	2002      	movs	r0, #2
 8002604:	f7ff ff50 	bl	80024a8 <LcdSendNibble>
  for(i=0; i<4; i++) LcdSendByte(0, LCD_INIT_STRING[i]);
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e00c      	b.n	800262a <LcdInit+0x7e>
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LcdInit+0x94>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	0019      	movs	r1, r3
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff ff8a 	bl	8002534 <LcdSendByte>
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	3201      	adds	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d9ee      	bls.n	8002610 <LcdInit+0x64>
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}
 800263c:	50000400 	.word	0x50000400
 8002640:	08004608 	.word	0x08004608

08002644 <lcd_gotoxy>:

void lcd_gotoxy(uint8_t x, uint8_t y) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	1dbb      	adds	r3, r7, #6
 8002652:	1c0a      	adds	r2, r1, #0
 8002654:	701a      	strb	r2, [r3, #0]
  uint8_t address;
  if(y != 1) address = 0x40;
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d004      	beq.n	8002668 <lcd_gotoxy+0x24>
 800265e:	230f      	movs	r3, #15
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e003      	b.n	8002670 <lcd_gotoxy+0x2c>
  else address = 0;
 8002668:	230f      	movs	r3, #15
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
  address += x-1;
 8002670:	1dfa      	adds	r2, r7, #7
 8002672:	210f      	movs	r1, #15
 8002674:	187b      	adds	r3, r7, r1
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	b2da      	uxtb	r2, r3
 800267e:	187b      	adds	r3, r7, r1
 8002680:	3a01      	subs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
  LcdSendByte(0, 0x80 | address);
 8002684:	187b      	adds	r3, r7, r1
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	4252      	negs	r2, r2
 800268c:	4313      	orrs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	0019      	movs	r1, r3
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff ff4e 	bl	8002534 <LcdSendByte>
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}

080026a0 <lcd_putc>:

void lcd_putc(uint8_t c) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	0002      	movs	r2, r0
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	701a      	strb	r2, [r3, #0]
  if(c == '\f') {
 80026ac:	1dfb      	adds	r3, r7, #7
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b0c      	cmp	r3, #12
 80026b2:	d107      	bne.n	80026c4 <lcd_putc+0x24>
    LcdSendByte(0, 1);
 80026b4:	2101      	movs	r1, #1
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff ff3c 	bl	8002534 <LcdSendByte>
    HAL_Delay(2);
 80026bc:	2002      	movs	r0, #2
 80026be:	f7fe f99b 	bl	80009f8 <HAL_Delay>
  }
  else if(c == '\n') lcd_gotoxy(1, 2);
  else if(c == '\b') LcdSendByte(0, 0x10);
  else LcdSendByte(1, c);
}
 80026c2:	e017      	b.n	80026f4 <lcd_putc+0x54>
  else if(c == '\n') lcd_gotoxy(1, 2);
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b0a      	cmp	r3, #10
 80026ca:	d104      	bne.n	80026d6 <lcd_putc+0x36>
 80026cc:	2102      	movs	r1, #2
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff ffb8 	bl	8002644 <lcd_gotoxy>
}
 80026d4:	e00e      	b.n	80026f4 <lcd_putc+0x54>
  else if(c == '\b') LcdSendByte(0, 0x10);
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d104      	bne.n	80026e8 <lcd_putc+0x48>
 80026de:	2110      	movs	r1, #16
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff ff27 	bl	8002534 <LcdSendByte>
}
 80026e6:	e005      	b.n	80026f4 <lcd_putc+0x54>
  else LcdSendByte(1, c);
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	0019      	movs	r1, r3
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff ff20 	bl	8002534 <LcdSendByte>
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <lcd_puts>:

void lcd_puts(const char* str) {
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i=0; i<strlen(str); i++) {
 8002704:	230f      	movs	r3, #15
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e00d      	b.n	800272a <lcd_puts+0x2e>
    lcd_putc(str[i]);
 800270e:	240f      	movs	r4, #15
 8002710:	193b      	adds	r3, r7, r4
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	18d3      	adds	r3, r2, r3
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff ffc0 	bl	80026a0 <lcd_putc>
  for(i=0; i<strlen(str); i++) {
 8002720:	193b      	adds	r3, r7, r4
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	193b      	adds	r3, r7, r4
 8002726:	3201      	adds	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781c      	ldrb	r4, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fce8 	bl	8000108 <strlen>
 8002738:	0003      	movs	r3, r0
 800273a:	429c      	cmp	r4, r3
 800273c:	d3e7      	bcc.n	800270e <lcd_puts+0x12>
  }
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b005      	add	sp, #20
 8002746:	bd90      	pop	{r4, r7, pc}

08002748 <lcd_cgram>:

void lcd_cgram(uint8_t room, uint8_t n) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	0002      	movs	r2, r0
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	1c0a      	adds	r2, r1, #0
 8002758:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  const uint8_t data[2][8]={{0x04, 0x04, 0x0E, 0x0F, 0x1B, 0x19, 0x11, 0x0A}, // FIRE SYMBOL
 800275a:	230c      	movs	r3, #12
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <lcd_cgram+0x80>)
 8002760:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002762:	c313      	stmia	r3!, {r0, r1, r4}
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	601a      	str	r2, [r3, #0]
                            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}; //
  
  for(i=0; i<8; i++) {
 8002768:	231f      	movs	r3, #31
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e020      	b.n	80027b4 <lcd_cgram+0x6c>
    LcdSendByte(0, 0x40+i+(room*8));
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	b2da      	uxtb	r2, r3
 800277a:	241f      	movs	r4, #31
 800277c:	193b      	adds	r3, r7, r4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3340      	adds	r3, #64	; 0x40
 8002786:	b2db      	uxtb	r3, r3
 8002788:	0019      	movs	r1, r3
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fed2 	bl	8002534 <LcdSendByte>
    LcdSendByte(1, data[n][i]);
 8002790:	1dbb      	adds	r3, r7, #6
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	193b      	adds	r3, r7, r4
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	210c      	movs	r1, #12
 800279a:	1879      	adds	r1, r7, r1
 800279c:	00d2      	lsls	r2, r2, #3
 800279e:	188a      	adds	r2, r1, r2
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	0019      	movs	r1, r3
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff fec5 	bl	8002534 <LcdSendByte>
  for(i=0; i<8; i++) {
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	3201      	adds	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	231f      	movs	r3, #31
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	d9d9      	bls.n	8002772 <lcd_cgram+0x2a>
  }
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b009      	add	sp, #36	; 0x24
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	08004520 	.word	0x08004520

080027cc <read_adc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t read_adc(uint8_t x)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	0002      	movs	r2, r0
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	701a      	strb	r2, [r3, #0]
  uint16_t adc[2];

  HAL_ADC_Start(&hadc);
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <read_adc+0x6c>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fe fa9e 	bl	8000d1c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 80027e0:	23fa      	movs	r3, #250	; 0xfa
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <read_adc+0x6c>)
 80027e6:	0011      	movs	r1, r2
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe fb2b 	bl	8000e44 <HAL_ADC_PollForConversion>
  adc[0]=HAL_ADC_GetValue(&hadc);
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <read_adc+0x6c>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe fbbd 	bl	8000f70 <HAL_ADC_GetValue>
 80027f6:	0003      	movs	r3, r0
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	240c      	movs	r4, #12
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	801a      	strh	r2, [r3, #0]
  HAL_ADC_PollForConversion(&hadc, 1000);
 8002800:	23fa      	movs	r3, #250	; 0xfa
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <read_adc+0x6c>)
 8002806:	0011      	movs	r1, r2
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe fb1b 	bl	8000e44 <HAL_ADC_PollForConversion>
  adc[1]=HAL_ADC_GetValue(&hadc);
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <read_adc+0x6c>)
 8002810:	0018      	movs	r0, r3
 8002812:	f7fe fbad 	bl	8000f70 <HAL_ADC_GetValue>
 8002816:	0003      	movs	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	193b      	adds	r3, r7, r4
 800281c:	805a      	strh	r2, [r3, #2]
  HAL_ADC_Stop(&hadc);
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <read_adc+0x6c>)
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe facf 	bl	8000dc4 <HAL_ADC_Stop>

  return adc[x];
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	193b      	adds	r3, r7, r4
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	5ad3      	ldrh	r3, [r2, r3]
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b005      	add	sp, #20
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	200000ac 	.word	0x200000ac

0800283c <status_cal>:

void status_cal()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  if(over_heat) status=OVER_HEAT;
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <status_cal+0x9c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <status_cal+0x14>
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <status_cal+0xa0>)
 800284a:	2203      	movs	r2, #3
 800284c:	701a      	strb	r2, [r3, #0]
  else if(safe_lock) status=SAFE_LOCK;
  else if(power==0) status=OFF;
  else if(power && (read_adc(CDS)<CDS_LIMIT)) status=ON_NONE;
  else if(auto_adj && (read_adc(CDS)>=CDS_LIMIT)) status=AUTO_ADJ;
  else if(power && (read_adc(CDS)>=CDS_LIMIT)) status=ON;
}
 800284e:	e03f      	b.n	80028d0 <status_cal+0x94>
  else if(safe_lock) status=SAFE_LOCK;
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <status_cal+0xa4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <status_cal+0x24>
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <status_cal+0xa0>)
 800285a:	2205      	movs	r2, #5
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	e037      	b.n	80028d0 <status_cal+0x94>
  else if(power==0) status=OFF;
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <status_cal+0xa8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <status_cal+0x34>
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <status_cal+0xa0>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
}
 800286e:	e02f      	b.n	80028d0 <status_cal+0x94>
  else if(power && (read_adc(CDS)<CDS_LIMIT)) status=ON_NONE;
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <status_cal+0xa8>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <status_cal+0x54>
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff ffa7 	bl	80027cc <read_adc>
 800287e:	0003      	movs	r3, r0
 8002880:	001a      	movs	r2, r3
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <status_cal+0xac>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d803      	bhi.n	8002890 <status_cal+0x54>
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <status_cal+0xa0>)
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e01f      	b.n	80028d0 <status_cal+0x94>
  else if(auto_adj && (read_adc(CDS)>=CDS_LIMIT)) status=AUTO_ADJ;
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <status_cal+0xb0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <status_cal+0x74>
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff ff97 	bl	80027cc <read_adc>
 800289e:	0003      	movs	r3, r0
 80028a0:	001a      	movs	r2, r3
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <status_cal+0xac>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d903      	bls.n	80028b0 <status_cal+0x74>
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <status_cal+0xa0>)
 80028aa:	2204      	movs	r2, #4
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e00f      	b.n	80028d0 <status_cal+0x94>
  else if(power && (read_adc(CDS)>=CDS_LIMIT)) status=ON;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <status_cal+0xa8>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <status_cal+0x94>
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff ff87 	bl	80027cc <read_adc>
 80028be:	0003      	movs	r3, r0
 80028c0:	001a      	movs	r2, r3
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <status_cal+0xac>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d903      	bls.n	80028d0 <status_cal+0x94>
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <status_cal+0xa0>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
}
 80028ce:	e7ff      	b.n	80028d0 <status_cal+0x94>
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	2000010e 	.word	0x2000010e
 80028dc:	2000010a 	.word	0x2000010a
 80028e0:	2000010d 	.word	0x2000010d
 80028e4:	2000010b 	.word	0x2000010b
 80028e8:	00000bb7 	.word	0x00000bb7
 80028ec:	2000010c 	.word	0x2000010c

080028f0 <lcd_dis>:

void lcd_dis()
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af02      	add	r7, sp, #8
  sprintf(temp,"TEMP:%03d%cC  %c:%d ", temper, 0xDF, 1, fire);
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <lcd_dis+0xa0>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	001a      	movs	r2, r3
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <lcd_dis+0xa4>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4925      	ldr	r1, [pc, #148]	; (8002998 <lcd_dis+0xa8>)
 8002902:	4826      	ldr	r0, [pc, #152]	; (800299c <lcd_dis+0xac>)
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2301      	movs	r3, #1
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	23df      	movs	r3, #223	; 0xdf
 800290c:	f001 f992 	bl	8003c34 <siprintf>
  sprintf(temp2,"%03d",a_temper);
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <lcd_dis+0xb0>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	001a      	movs	r2, r3
 8002916:	4923      	ldr	r1, [pc, #140]	; (80029a4 <lcd_dis+0xb4>)
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <lcd_dis+0xb8>)
 800291a:	0018      	movs	r0, r3
 800291c:	f001 f98a 	bl	8003c34 <siprintf>
  lcd_gotoxy(1,1); lcd_puts(temp);
 8002920:	2101      	movs	r1, #1
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff fe8e 	bl	8002644 <lcd_gotoxy>
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <lcd_dis+0xac>)
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff fee6 	bl	80026fc <lcd_puts>
  lcd_gotoxy(1,2); lcd_puts("[");
 8002930:	2102      	movs	r1, #2
 8002932:	2001      	movs	r0, #1
 8002934:	f7ff fe86 	bl	8002644 <lcd_gotoxy>
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <lcd_dis+0xbc>)
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff fede 	bl	80026fc <lcd_puts>
  lcd_gotoxy(11,2); lcd_puts("][");
 8002940:	2102      	movs	r1, #2
 8002942:	200b      	movs	r0, #11
 8002944:	f7ff fe7e 	bl	8002644 <lcd_gotoxy>
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <lcd_dis+0xc0>)
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff fed6 	bl	80026fc <lcd_puts>
  lcd_gotoxy(16,2); lcd_puts("]");
 8002950:	2102      	movs	r1, #2
 8002952:	2010      	movs	r0, #16
 8002954:	f7ff fe76 	bl	8002644 <lcd_gotoxy>
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <lcd_dis+0xc4>)
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff fece 	bl	80026fc <lcd_puts>
  lcd_gotoxy(2,2); lcd_puts(status_fonts[status]);
 8002960:	2102      	movs	r1, #2
 8002962:	2002      	movs	r0, #2
 8002964:	f7ff fe6e 	bl	8002644 <lcd_gotoxy>
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <lcd_dis+0xc8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	001a      	movs	r2, r3
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <lcd_dis+0xcc>)
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	58d3      	ldr	r3, [r2, r3]
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff fec1 	bl	80026fc <lcd_puts>
  lcd_gotoxy(13,2); lcd_puts(temp2);
 800297a:	2102      	movs	r1, #2
 800297c:	200d      	movs	r0, #13
 800297e:	f7ff fe61 	bl	8002644 <lcd_gotoxy>
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <lcd_dis+0xb8>)
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff feb9 	bl	80026fc <lcd_puts>
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000000 	.word	0x20000000
 8002994:	20000110 	.word	0x20000110
 8002998:	08004578 	.word	0x08004578
 800299c:	20000128 	.word	0x20000128
 80029a0:	20000002 	.word	0x20000002
 80029a4:	08004590 	.word	0x08004590
 80029a8:	20000150 	.word	0x20000150
 80029ac:	08004598 	.word	0x08004598
 80029b0:	0800459c 	.word	0x0800459c
 80029b4:	080045a0 	.word	0x080045a0
 80029b8:	2000010a 	.word	0x2000010a
 80029bc:	2000000c 	.word	0x2000000c

080029c0 <led_ring>:

void led_ring()
{
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  if((HAL_GetTick()-r_count)>=100)
 80029c4:	f7fe f80e 	bl	80009e4 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	4bc9      	ldr	r3, [pc, #804]	; (8002cf0 <led_ring+0x330>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b63      	cmp	r3, #99	; 0x63
 80029d2:	d800      	bhi.n	80029d6 <led_ring+0x16>
 80029d4:	e188      	b.n	8002ce8 <led_ring+0x328>
  {
    if(fire!=fire_ring)
 80029d6:	4bc7      	ldr	r3, [pc, #796]	; (8002cf4 <led_ring+0x334>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4bc7      	ldr	r3, [pc, #796]	; (8002cf8 <led_ring+0x338>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d012      	beq.n	8002a08 <led_ring+0x48>
    {
      if(fire>fire_ring) fire_ring++;
 80029e2:	4bc4      	ldr	r3, [pc, #784]	; (8002cf4 <led_ring+0x334>)
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	4bc4      	ldr	r3, [pc, #784]	; (8002cf8 <led_ring+0x338>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d906      	bls.n	80029fc <led_ring+0x3c>
 80029ee:	4bc2      	ldr	r3, [pc, #776]	; (8002cf8 <led_ring+0x338>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4bc0      	ldr	r3, [pc, #768]	; (8002cf8 <led_ring+0x338>)
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e005      	b.n	8002a08 <led_ring+0x48>
      else fire_ring--;
 80029fc:	4bbe      	ldr	r3, [pc, #760]	; (8002cf8 <led_ring+0x338>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4bbc      	ldr	r3, [pc, #752]	; (8002cf8 <led_ring+0x338>)
 8002a06:	701a      	strb	r2, [r3, #0]
    }

    if(fire_ring>0)
 8002a08:	4bbb      	ldr	r3, [pc, #748]	; (8002cf8 <led_ring+0x338>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d100      	bne.n	8002a12 <led_ring+0x52>
 8002a10:	e147      	b.n	8002ca2 <led_ring+0x2e2>
    {
      if(fire_ring<=3)
 8002a12:	4bb9      	ldr	r3, [pc, #740]	; (8002cf8 <led_ring+0x338>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d86e      	bhi.n	8002af8 <led_ring+0x138>
      {
        for(i=1; i<12; i+=2)
 8002a1a:	4bb8      	ldr	r3, [pc, #736]	; (8002cfc <led_ring+0x33c>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e011      	b.n	8002a46 <led_ring+0x86>
        {
          led_ring_data[i]=led_ring_rgb(0,0,0);
 8002a22:	4bb6      	ldr	r3, [pc, #728]	; (8002cfc <led_ring+0x33c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	001c      	movs	r4, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7ff fcc3 	bl	80023b8 <led_ring_rgb>
 8002a32:	0001      	movs	r1, r0
 8002a34:	4bb2      	ldr	r3, [pc, #712]	; (8002d00 <led_ring+0x340>)
 8002a36:	00a2      	lsls	r2, r4, #2
 8002a38:	50d1      	str	r1, [r2, r3]
        for(i=1; i<12; i+=2)
 8002a3a:	4bb0      	ldr	r3, [pc, #704]	; (8002cfc <led_ring+0x33c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4bae      	ldr	r3, [pc, #696]	; (8002cfc <led_ring+0x33c>)
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	4bad      	ldr	r3, [pc, #692]	; (8002cfc <led_ring+0x33c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b0b      	cmp	r3, #11
 8002a4c:	d9e9      	bls.n	8002a22 <led_ring+0x62>
        }
        for(i=2; i<12; i+=4)
 8002a4e:	4bab      	ldr	r3, [pc, #684]	; (8002cfc <led_ring+0x33c>)
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e011      	b.n	8002a7a <led_ring+0xba>
        {
          led_ring_data[i]=led_ring_rgb(0,0,0);
 8002a56:	4ba9      	ldr	r3, [pc, #676]	; (8002cfc <led_ring+0x33c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	001c      	movs	r4, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7ff fca9 	bl	80023b8 <led_ring_rgb>
 8002a66:	0001      	movs	r1, r0
 8002a68:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <led_ring+0x340>)
 8002a6a:	00a2      	lsls	r2, r4, #2
 8002a6c:	50d1      	str	r1, [r2, r3]
        for(i=2; i<12; i+=4)
 8002a6e:	4ba3      	ldr	r3, [pc, #652]	; (8002cfc <led_ring+0x33c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3304      	adds	r3, #4
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4ba1      	ldr	r3, [pc, #644]	; (8002cfc <led_ring+0x33c>)
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	4ba0      	ldr	r3, [pc, #640]	; (8002cfc <led_ring+0x33c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b0b      	cmp	r3, #11
 8002a80:	d9e9      	bls.n	8002a56 <led_ring+0x96>
        }

        if(fire_ring==1) {led_ring_data[0]=led_ring_data[4]=led_ring_data[8]=led_ring_rgb(0,0,13);}
 8002a82:	4b9d      	ldr	r3, [pc, #628]	; (8002cf8 <led_ring+0x338>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d110      	bne.n	8002aac <led_ring+0xec>
 8002a8a:	220d      	movs	r2, #13
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff fc92 	bl	80023b8 <led_ring_rgb>
 8002a94:	0002      	movs	r2, r0
 8002a96:	4b9a      	ldr	r3, [pc, #616]	; (8002d00 <led_ring+0x340>)
 8002a98:	621a      	str	r2, [r3, #32]
 8002a9a:	4b99      	ldr	r3, [pc, #612]	; (8002d00 <led_ring+0x340>)
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <led_ring+0x340>)
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <led_ring+0x340>)
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	4b96      	ldr	r3, [pc, #600]	; (8002d00 <led_ring+0x340>)
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e035      	b.n	8002b18 <led_ring+0x158>
        else if(fire_ring==2) {led_ring_data[0]=led_ring_data[4]=led_ring_data[8]=led_ring_rgb(0,0,76);}
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <led_ring+0x338>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d110      	bne.n	8002ad6 <led_ring+0x116>
 8002ab4:	224c      	movs	r2, #76	; 0x4c
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7ff fc7d 	bl	80023b8 <led_ring_rgb>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	4b8f      	ldr	r3, [pc, #572]	; (8002d00 <led_ring+0x340>)
 8002ac2:	621a      	str	r2, [r3, #32]
 8002ac4:	4b8e      	ldr	r3, [pc, #568]	; (8002d00 <led_ring+0x340>)
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <led_ring+0x340>)
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <led_ring+0x340>)
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <led_ring+0x340>)
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e020      	b.n	8002b18 <led_ring+0x158>
        else {led_ring_data[0]=led_ring_data[4]=led_ring_data[8]=led_ring_rgb(0,0,255);}
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7ff fc6c 	bl	80023b8 <led_ring_rgb>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <led_ring+0x340>)
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <led_ring+0x340>)
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <led_ring+0x340>)
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	4b84      	ldr	r3, [pc, #528]	; (8002d00 <led_ring+0x340>)
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <led_ring+0x340>)
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e00f      	b.n	8002b18 <led_ring+0x158>
      }
      else {led_ring_data[0]=led_ring_data[4]=led_ring_data[8]=led_ring_rgb(0,0,255);}
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	2100      	movs	r1, #0
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff fc5b 	bl	80023b8 <led_ring_rgb>
 8002b02:	0002      	movs	r2, r0
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <led_ring+0x340>)
 8002b06:	621a      	str	r2, [r3, #32]
 8002b08:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <led_ring+0x340>)
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <led_ring+0x340>)
 8002b0e:	611a      	str	r2, [r3, #16]
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <led_ring+0x340>)
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <led_ring+0x340>)
 8002b16:	601a      	str	r2, [r3, #0]

      if(fire_ring>3 && fire_ring<=6)
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <led_ring+0x338>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d957      	bls.n	8002bd0 <led_ring+0x210>
 8002b20:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <led_ring+0x338>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d853      	bhi.n	8002bd0 <led_ring+0x210>
      {
        for(i=1; i<12; i+=2)
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <led_ring+0x33c>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e011      	b.n	8002b54 <led_ring+0x194>
        {
          led_ring_data[i]=led_ring_rgb(0,0,0);
 8002b30:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <led_ring+0x33c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	001c      	movs	r4, r3
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff fc3c 	bl	80023b8 <led_ring_rgb>
 8002b40:	0001      	movs	r1, r0
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <led_ring+0x340>)
 8002b44:	00a2      	lsls	r2, r4, #2
 8002b46:	50d1      	str	r1, [r2, r3]
        for(i=1; i<12; i+=2)
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <led_ring+0x33c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <led_ring+0x33c>)
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <led_ring+0x33c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b0b      	cmp	r3, #11
 8002b5a:	d9e9      	bls.n	8002b30 <led_ring+0x170>
        }

        if(fire_ring==4) {led_ring_data[2]=led_ring_data[6]=led_ring_data[10]=led_ring_rgb(0,0,13);}
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <led_ring+0x338>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d110      	bne.n	8002b86 <led_ring+0x1c6>
 8002b64:	220d      	movs	r2, #13
 8002b66:	2100      	movs	r1, #0
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff fc25 	bl	80023b8 <led_ring_rgb>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <led_ring+0x340>)
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <led_ring+0x340>)
 8002b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <led_ring+0x340>)
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <led_ring+0x340>)
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <led_ring+0x340>)
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e024      	b.n	8002bd0 <led_ring+0x210>
        else if(fire_ring==5) {led_ring_data[2]=led_ring_data[6]=led_ring_data[10]=led_ring_rgb(0,0,76);}
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <led_ring+0x338>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d110      	bne.n	8002bb0 <led_ring+0x1f0>
 8002b8e:	224c      	movs	r2, #76	; 0x4c
 8002b90:	2100      	movs	r1, #0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7ff fc10 	bl	80023b8 <led_ring_rgb>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <led_ring+0x340>)
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <led_ring+0x340>)
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <led_ring+0x340>)
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <led_ring+0x340>)
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <led_ring+0x340>)
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	e00f      	b.n	8002bd0 <led_ring+0x210>
        else {led_ring_data[2]=led_ring_data[6]=led_ring_data[10]=led_ring_rgb(0,0,255);}
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7ff fbff 	bl	80023b8 <led_ring_rgb>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <led_ring+0x340>)
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <led_ring+0x340>)
 8002bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <led_ring+0x340>)
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <led_ring+0x340>)
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <led_ring+0x340>)
 8002bce:	609a      	str	r2, [r3, #8]
      }

      if(fire_ring>6 && fire_ring<=9)
 8002bd0:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <led_ring+0x338>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d800      	bhi.n	8002bda <led_ring+0x21a>
 8002bd8:	e07d      	b.n	8002cd6 <led_ring+0x316>
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <led_ring+0x338>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	d900      	bls.n	8002be4 <led_ring+0x224>
 8002be2:	e078      	b.n	8002cd6 <led_ring+0x316>
      {
        if(fire_ring==7) {led_ring_data[1]=led_ring_data[3]=led_ring_data[5]=led_ring_data[7]=led_ring_data[9]=led_ring_data[11]=led_ring_rgb(0,0,13);}
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <led_ring+0x338>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d11c      	bne.n	8002c26 <led_ring+0x266>
 8002bec:	220d      	movs	r2, #13
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7ff fbe1 	bl	80023b8 <led_ring_rgb>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <led_ring+0x340>)
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <led_ring+0x340>)
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <led_ring+0x340>)
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <led_ring+0x340>)
 8002c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c08:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <led_ring+0x340>)
 8002c0a:	61da      	str	r2, [r3, #28]
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <led_ring+0x340>)
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <led_ring+0x340>)
 8002c12:	615a      	str	r2, [r3, #20]
 8002c14:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <led_ring+0x340>)
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <led_ring+0x340>)
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <led_ring+0x340>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <led_ring+0x340>)
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e057      	b.n	8002cd6 <led_ring+0x316>
        else if(fire_ring==8) {led_ring_data[1]=led_ring_data[3]=led_ring_data[5]=led_ring_data[7]=led_ring_data[9]=led_ring_data[11]=led_ring_rgb(0,0,76);}
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <led_ring+0x338>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <led_ring+0x2a8>
 8002c2e:	224c      	movs	r2, #76	; 0x4c
 8002c30:	2100      	movs	r1, #0
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7ff fbc0 	bl	80023b8 <led_ring_rgb>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <led_ring+0x340>)
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <led_ring+0x340>)
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <led_ring+0x340>)
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
 8002c46:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <led_ring+0x340>)
 8002c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <led_ring+0x340>)
 8002c4c:	61da      	str	r2, [r3, #28]
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <led_ring+0x340>)
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <led_ring+0x340>)
 8002c54:	615a      	str	r2, [r3, #20]
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <led_ring+0x340>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <led_ring+0x340>)
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <led_ring+0x340>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <led_ring+0x340>)
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	e036      	b.n	8002cd6 <led_ring+0x316>
        else {led_ring_data[1]=led_ring_data[3]=led_ring_data[5]=led_ring_data[7]=led_ring_data[9]=led_ring_data[11]=led_ring_rgb(0,0,255);}
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fba3 	bl	80023b8 <led_ring_rgb>
 8002c72:	0002      	movs	r2, r0
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <led_ring+0x340>)
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <led_ring+0x340>)
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <led_ring+0x340>)
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <led_ring+0x340>)
 8002c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <led_ring+0x340>)
 8002c86:	61da      	str	r2, [r3, #28]
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <led_ring+0x340>)
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <led_ring+0x340>)
 8002c8e:	615a      	str	r2, [r3, #20]
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <led_ring+0x340>)
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <led_ring+0x340>)
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <led_ring+0x340>)
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <led_ring+0x340>)
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	e019      	b.n	8002cd6 <led_ring+0x316>
      }
    }
    else
    {
      for(i=0; i<12; i++)
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <led_ring+0x33c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e011      	b.n	8002cce <led_ring+0x30e>
      {
        led_ring_data[i]=led_ring_rgb(0,0,0);
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <led_ring+0x33c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	001c      	movs	r4, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7ff fb7f 	bl	80023b8 <led_ring_rgb>
 8002cba:	0001      	movs	r1, r0
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <led_ring+0x340>)
 8002cbe:	00a2      	lsls	r2, r4, #2
 8002cc0:	50d1      	str	r1, [r2, r3]
      for(i=0; i<12; i++)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <led_ring+0x33c>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <led_ring+0x33c>)
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <led_ring+0x33c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b0b      	cmp	r3, #11
 8002cd4:	d9e9      	bls.n	8002caa <led_ring+0x2ea>
      }
    }

    led_ring_update(led_ring_data);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <led_ring+0x340>)
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff fb07 	bl	80022ec <led_ring_update>
    r_count=HAL_GetTick();
 8002cde:	f7fd fe81 	bl	80009e4 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <led_ring+0x330>)
 8002ce6:	601a      	str	r2, [r3, #0]
  }
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000114 	.word	0x20000114
 8002cf4:	20000110 	.word	0x20000110
 8002cf8:	20000111 	.word	0x20000111
 8002cfc:	2000010f 	.word	0x2000010f
 8002d00:	20000178 	.word	0x20000178

08002d04 <temper_updown>:

void temper_updown()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  if((temper-B_TEMP)<10) temper_dnspeed=2900;
 8002d08:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <temper_updown+0x150>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	2b1d      	cmp	r3, #29
 8002d0e:	d803      	bhi.n	8002d18 <temper_updown+0x14>
 8002d10:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <temper_updown+0x154>)
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <temper_updown+0x158>)
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e041      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=300) temper_dnspeed=100;
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <temper_updown+0x150>)
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	23a0      	movs	r3, #160	; 0xa0
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d303      	bcc.n	8002d2c <temper_updown+0x28>
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <temper_updown+0x154>)
 8002d26:	2264      	movs	r2, #100	; 0x64
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e037      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=200) temper_dnspeed=200;
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <temper_updown+0x150>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	2bdb      	cmp	r3, #219	; 0xdb
 8002d32:	d903      	bls.n	8002d3c <temper_updown+0x38>
 8002d34:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <temper_updown+0x154>)
 8002d36:	22c8      	movs	r2, #200	; 0xc8
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e02f      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=100) temper_dnspeed=400;
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <temper_updown+0x150>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	2b77      	cmp	r3, #119	; 0x77
 8002d42:	d904      	bls.n	8002d4e <temper_updown+0x4a>
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <temper_updown+0x154>)
 8002d46:	22c8      	movs	r2, #200	; 0xc8
 8002d48:	0052      	lsls	r2, r2, #1
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e026      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=40) temper_dnspeed=700;
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <temper_updown+0x150>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	2b3b      	cmp	r3, #59	; 0x3b
 8002d54:	d904      	bls.n	8002d60 <temper_updown+0x5c>
 8002d56:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <temper_updown+0x154>)
 8002d58:	22af      	movs	r2, #175	; 0xaf
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e01d      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=20) temper_dnspeed=1100;
 8002d60:	4b3c      	ldr	r3, [pc, #240]	; (8002e54 <temper_updown+0x150>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b27      	cmp	r3, #39	; 0x27
 8002d66:	d903      	bls.n	8002d70 <temper_updown+0x6c>
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <temper_updown+0x154>)
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <temper_updown+0x15c>)
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e015      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=15) temper_dnspeed=1600;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <temper_updown+0x150>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b22      	cmp	r3, #34	; 0x22
 8002d76:	d904      	bls.n	8002d82 <temper_updown+0x7e>
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <temper_updown+0x154>)
 8002d7a:	22c8      	movs	r2, #200	; 0xc8
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e00c      	b.n	8002d9c <temper_updown+0x98>
  else if((temper-B_TEMP)>=10) temper_dnspeed=2200;
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <temper_updown+0x150>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	2b1d      	cmp	r3, #29
 8002d88:	d903      	bls.n	8002d92 <temper_updown+0x8e>
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <temper_updown+0x154>)
 8002d8c:	4a35      	ldr	r2, [pc, #212]	; (8002e64 <temper_updown+0x160>)
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	e004      	b.n	8002d9c <temper_updown+0x98>
  else dn_count=HAL_GetTick();
 8002d92:	f7fd fe27 	bl	80009e4 <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <temper_updown+0x164>)
 8002d9a:	601a      	str	r2, [r3, #0]

  if(fire==0) up_count=HAL_GetTick();
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <temper_updown+0x168>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <temper_updown+0xac>
 8002da4:	f7fd fe1e 	bl	80009e4 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <temper_updown+0x16c>)
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e012      	b.n	8002dd6 <temper_updown+0xd2>
  else
  {
    temper_upspeed=(1000-(fire*100));
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <temper_updown+0x168>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	1c1a      	adds	r2, r3, #0
 8002db8:	0252      	lsls	r2, r2, #9
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	18d2      	adds	r2, r2, r3
 8002dc0:	00d2      	lsls	r2, r2, #3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	22fa      	movs	r2, #250	; 0xfa
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4694      	mov	ip, r2
 8002dce:	4463      	add	r3, ip
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <temper_updown+0x170>)
 8002dd4:	801a      	strh	r2, [r3, #0]
  }

  if(HAL_GetTick()-dn_count>=temper_dnspeed)
 8002dd6:	f7fd fe05 	bl	80009e4 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <temper_updown+0x164>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <temper_updown+0x154>)
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d30a      	bcc.n	8002e00 <temper_updown+0xfc>
  {
    temper--;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <temper_updown+0x150>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <temper_updown+0x150>)
 8002df4:	801a      	strh	r2, [r3, #0]
    dn_count=HAL_GetTick();
 8002df6:	f7fd fdf5 	bl	80009e4 <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <temper_updown+0x164>)
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  if(HAL_GetTick()-up_count>=temper_upspeed)
 8002e00:	f7fd fdf0 	bl	80009e4 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <temper_updown+0x16c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <temper_updown+0x170>)
 8002e0e:	8812      	ldrh	r2, [r2, #0]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d30a      	bcc.n	8002e2a <temper_updown+0x126>
  {
    temper++;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <temper_updown+0x150>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <temper_updown+0x150>)
 8002e1e:	801a      	strh	r2, [r3, #0]
    up_count=HAL_GetTick();
 8002e20:	f7fd fde0 	bl	80009e4 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <temper_updown+0x16c>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  if(temper>999) temper=999;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <temper_updown+0x150>)
 8002e2c:	881a      	ldrh	r2, [r3, #0]
 8002e2e:	23fa      	movs	r3, #250	; 0xfa
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d303      	bcc.n	8002e3e <temper_updown+0x13a>
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <temper_updown+0x150>)
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <temper_updown+0x174>)
 8002e3a:	801a      	strh	r2, [r3, #0]
  else if(temper<20) temper=20;

}
 8002e3c:	e006      	b.n	8002e4c <temper_updown+0x148>
  else if(temper<20) temper=20;
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <temper_updown+0x150>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b13      	cmp	r3, #19
 8002e44:	d802      	bhi.n	8002e4c <temper_updown+0x148>
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <temper_updown+0x150>)
 8002e48:	2214      	movs	r2, #20
 8002e4a:	801a      	strh	r2, [r3, #0]
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	00000b54 	.word	0x00000b54
 8002e60:	0000044c 	.word	0x0000044c
 8002e64:	00000898 	.word	0x00000898
 8002e68:	2000011c 	.word	0x2000011c
 8002e6c:	20000110 	.word	0x20000110
 8002e70:	20000118 	.word	0x20000118
 8002e74:	20000006 	.word	0x20000006
 8002e78:	000003e7 	.word	0x000003e7

08002e7c <buzz_3sound>:

void buzz_3sound(uint8_t *b_flag)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if(*b_flag)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d100      	bne.n	8002e8e <buzz_3sound+0x12>
 8002e8c:	e086      	b.n	8002f9c <buzz_3sound+0x120>
  {
    if(HAL_GetTick()-b_count<=200) BUZZ_ON
 8002e8e:	f7fd fda9 	bl	80009e4 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <buzz_3sound+0x128>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2bc8      	cmp	r3, #200	; 0xc8
 8002e9c:	d809      	bhi.n	8002eb2 <buzz_3sound+0x36>
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	0209      	lsls	r1, r1, #8
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]
          BUZZ_OFF
          b_count=HAL_GetTick();
          *b_flag=0;
        }
  }
}
 8002eb0:	e074      	b.n	8002f9c <buzz_3sound+0x120>
        else if(HAL_GetTick()-b_count<=400) BUZZ_OFF
 8002eb2:	f7fd fd97 	bl	80009e4 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <buzz_3sound+0x128>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1ad2      	subs	r2, r2, r3
 8002ebe:	23c8      	movs	r3, #200	; 0xc8
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d809      	bhi.n	8002eda <buzz_3sound+0x5e>
 8002ec6:	23a0      	movs	r3, #160	; 0xa0
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ecc:	23a0      	movs	r3, #160	; 0xa0
 8002ece:	05db      	lsls	r3, r3, #23
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0209      	lsls	r1, r1, #8
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed8:	e060      	b.n	8002f9c <buzz_3sound+0x120>
        else if(HAL_GetTick()-b_count<=600) BUZZ_ON
 8002eda:	f7fd fd83 	bl	80009e4 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <buzz_3sound+0x128>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1ad2      	subs	r2, r2, r3
 8002ee6:	2396      	movs	r3, #150	; 0x96
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d809      	bhi.n	8002f02 <buzz_3sound+0x86>
 8002eee:	23a0      	movs	r3, #160	; 0xa0
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	23a0      	movs	r3, #160	; 0xa0
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0209      	lsls	r1, r1, #8
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
}
 8002f00:	e04c      	b.n	8002f9c <buzz_3sound+0x120>
        else if(HAL_GetTick()-b_count<=800) BUZZ_OFF
 8002f02:	f7fd fd6f 	bl	80009e4 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <buzz_3sound+0x128>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	23c8      	movs	r3, #200	; 0xc8
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d809      	bhi.n	8002f2a <buzz_3sound+0xae>
 8002f16:	23a0      	movs	r3, #160	; 0xa0
 8002f18:	05db      	lsls	r3, r3, #23
 8002f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1c:	23a0      	movs	r3, #160	; 0xa0
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0209      	lsls	r1, r1, #8
 8002f24:	430a      	orrs	r2, r1
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f28:	e038      	b.n	8002f9c <buzz_3sound+0x120>
        else if(HAL_GetTick()-b_count<=1000) BUZZ_ON
 8002f2a:	f7fd fd5b 	bl	80009e4 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <buzz_3sound+0x128>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	23fa      	movs	r3, #250	; 0xfa
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d809      	bhi.n	8002f52 <buzz_3sound+0xd6>
 8002f3e:	23a0      	movs	r3, #160	; 0xa0
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0209      	lsls	r1, r1, #8
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	619a      	str	r2, [r3, #24]
}
 8002f50:	e024      	b.n	8002f9c <buzz_3sound+0x120>
        else if(HAL_GetTick()-b_count<=1200) BUZZ_OFF
 8002f52:	f7fd fd47 	bl	80009e4 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <buzz_3sound+0x128>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1ad2      	subs	r2, r2, r3
 8002f5e:	2396      	movs	r3, #150	; 0x96
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d809      	bhi.n	8002f7a <buzz_3sound+0xfe>
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6c:	23a0      	movs	r3, #160	; 0xa0
 8002f6e:	05db      	lsls	r3, r3, #23
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	0209      	lsls	r1, r1, #8
 8002f74:	430a      	orrs	r2, r1
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f78:	e010      	b.n	8002f9c <buzz_3sound+0x120>
          BUZZ_OFF
 8002f7a:	23a0      	movs	r3, #160	; 0xa0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f80:	23a0      	movs	r3, #160	; 0xa0
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0209      	lsls	r1, r1, #8
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
          b_count=HAL_GetTick();
 8002f8c:	f7fd fd2a 	bl	80009e4 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <buzz_3sound+0x128>)
 8002f94:	601a      	str	r2, [r3, #0]
          *b_flag=0;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000120 	.word	0x20000120

08002fa8 <led_con>:

void led_con(uint8_t led)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	0002      	movs	r2, r0
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	701a      	strb	r2, [r3, #0]
  if(led==1)
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d12b      	bne.n	8003014 <led_con+0x6c>
  {
    LED1_ON
 8002fbc:	23a0      	movs	r3, #160	; 0xa0
 8002fbe:	05db      	lsls	r3, r3, #23
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	23a0      	movs	r3, #160	; 0xa0
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
    LED2_OFF
 8002fcc:	23a0      	movs	r3, #160	; 0xa0
 8002fce:	05db      	lsls	r3, r3, #23
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	23a0      	movs	r3, #160	; 0xa0
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
    LED3_OFF
 8002fdc:	23a0      	movs	r3, #160	; 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	0049      	lsls	r1, r1, #1
 8002fea:	430a      	orrs	r2, r1
 8002fec:	619a      	str	r2, [r3, #24]
    LED4_OFF
 8002fee:	23a0      	movs	r3, #160	; 0xa0
 8002ff0:	05db      	lsls	r3, r3, #23
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	05db      	lsls	r3, r3, #23
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0089      	lsls	r1, r1, #2
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
    LED5_OFF
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	23a0      	movs	r3, #160	; 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	00c9      	lsls	r1, r1, #3
 800300e:	430a      	orrs	r2, r1
 8003010:	619a      	str	r2, [r3, #24]
    LED2_OFF
    LED3_OFF
    LED4_OFF
    LED5_OFF
  }
}
 8003012:	e0ea      	b.n	80031ea <led_con+0x242>
  else if(led==2)
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d12b      	bne.n	8003074 <led_con+0xcc>
    LED1_OFF
 800301c:	23a0      	movs	r3, #160	; 0xa0
 800301e:	05db      	lsls	r3, r3, #23
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	23a0      	movs	r3, #160	; 0xa0
 8003024:	05db      	lsls	r3, r3, #23
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
    LED2_ON
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	23a0      	movs	r3, #160	; 0xa0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	430a      	orrs	r2, r1
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
    LED3_OFF
 800303c:	23a0      	movs	r3, #160	; 0xa0
 800303e:	05db      	lsls	r3, r3, #23
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0049      	lsls	r1, r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
    LED4_OFF
 800304e:	23a0      	movs	r3, #160	; 0xa0
 8003050:	05db      	lsls	r3, r3, #23
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	23a0      	movs	r3, #160	; 0xa0
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	0089      	lsls	r1, r1, #2
 800305c:	430a      	orrs	r2, r1
 800305e:	619a      	str	r2, [r3, #24]
    LED5_OFF
 8003060:	23a0      	movs	r3, #160	; 0xa0
 8003062:	05db      	lsls	r3, r3, #23
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	23a0      	movs	r3, #160	; 0xa0
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	00c9      	lsls	r1, r1, #3
 800306e:	430a      	orrs	r2, r1
 8003070:	619a      	str	r2, [r3, #24]
}
 8003072:	e0ba      	b.n	80031ea <led_con+0x242>
  else if(led==3)
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d12b      	bne.n	80030d4 <led_con+0x12c>
    LED1_OFF
 800307c:	23a0      	movs	r3, #160	; 0xa0
 800307e:	05db      	lsls	r3, r3, #23
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	23a0      	movs	r3, #160	; 0xa0
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
    LED2_OFF
 800308c:	23a0      	movs	r3, #160	; 0xa0
 800308e:	05db      	lsls	r3, r3, #23
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	23a0      	movs	r3, #160	; 0xa0
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
    LED3_ON
 800309c:	23a0      	movs	r3, #160	; 0xa0
 800309e:	05db      	lsls	r3, r3, #23
 80030a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a2:	23a0      	movs	r3, #160	; 0xa0
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0049      	lsls	r1, r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
    LED4_OFF
 80030ae:	23a0      	movs	r3, #160	; 0xa0
 80030b0:	05db      	lsls	r3, r3, #23
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	23a0      	movs	r3, #160	; 0xa0
 80030b6:	05db      	lsls	r3, r3, #23
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	0089      	lsls	r1, r1, #2
 80030bc:	430a      	orrs	r2, r1
 80030be:	619a      	str	r2, [r3, #24]
    LED5_OFF
 80030c0:	23a0      	movs	r3, #160	; 0xa0
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	23a0      	movs	r3, #160	; 0xa0
 80030c8:	05db      	lsls	r3, r3, #23
 80030ca:	2180      	movs	r1, #128	; 0x80
 80030cc:	00c9      	lsls	r1, r1, #3
 80030ce:	430a      	orrs	r2, r1
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	e08a      	b.n	80031ea <led_con+0x242>
  else if(led==4)
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d12b      	bne.n	8003134 <led_con+0x18c>
    LED1_OFF
 80030dc:	23a0      	movs	r3, #160	; 0xa0
 80030de:	05db      	lsls	r3, r3, #23
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	23a0      	movs	r3, #160	; 0xa0
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
    LED2_OFF
 80030ec:	23a0      	movs	r3, #160	; 0xa0
 80030ee:	05db      	lsls	r3, r3, #23
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	23a0      	movs	r3, #160	; 0xa0
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	430a      	orrs	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
    LED3_OFF
 80030fc:	23a0      	movs	r3, #160	; 0xa0
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	23a0      	movs	r3, #160	; 0xa0
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	0049      	lsls	r1, r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	619a      	str	r2, [r3, #24]
    LED4_ON
 800310e:	23a0      	movs	r3, #160	; 0xa0
 8003110:	05db      	lsls	r3, r3, #23
 8003112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003114:	23a0      	movs	r3, #160	; 0xa0
 8003116:	05db      	lsls	r3, r3, #23
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	0089      	lsls	r1, r1, #2
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
    LED5_OFF
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	23a0      	movs	r3, #160	; 0xa0
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	00c9      	lsls	r1, r1, #3
 800312e:	430a      	orrs	r2, r1
 8003130:	619a      	str	r2, [r3, #24]
}
 8003132:	e05a      	b.n	80031ea <led_con+0x242>
  else if(led==5)
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d12b      	bne.n	8003194 <led_con+0x1ec>
    LED1_OFF
 800313c:	23a0      	movs	r3, #160	; 0xa0
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	23a0      	movs	r3, #160	; 0xa0
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	430a      	orrs	r2, r1
 800314a:	619a      	str	r2, [r3, #24]
    LED2_OFF
 800314c:	23a0      	movs	r3, #160	; 0xa0
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	23a0      	movs	r3, #160	; 0xa0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	430a      	orrs	r2, r1
 800315a:	619a      	str	r2, [r3, #24]
    LED3_OFF
 800315c:	23a0      	movs	r3, #160	; 0xa0
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	23a0      	movs	r3, #160	; 0xa0
 8003164:	05db      	lsls	r3, r3, #23
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	0049      	lsls	r1, r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	619a      	str	r2, [r3, #24]
    LED4_OFF
 800316e:	23a0      	movs	r3, #160	; 0xa0
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	23a0      	movs	r3, #160	; 0xa0
 8003176:	05db      	lsls	r3, r3, #23
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0089      	lsls	r1, r1, #2
 800317c:	430a      	orrs	r2, r1
 800317e:	619a      	str	r2, [r3, #24]
    LED5_ON
 8003180:	23a0      	movs	r3, #160	; 0xa0
 8003182:	05db      	lsls	r3, r3, #23
 8003184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	00c9      	lsls	r1, r1, #3
 800318e:	430a      	orrs	r2, r1
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003192:	e02a      	b.n	80031ea <led_con+0x242>
    LED1_OFF
 8003194:	23a0      	movs	r3, #160	; 0xa0
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	23a0      	movs	r3, #160	; 0xa0
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	430a      	orrs	r2, r1
 80031a2:	619a      	str	r2, [r3, #24]
    LED2_OFF
 80031a4:	23a0      	movs	r3, #160	; 0xa0
 80031a6:	05db      	lsls	r3, r3, #23
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	23a0      	movs	r3, #160	; 0xa0
 80031ac:	05db      	lsls	r3, r3, #23
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	430a      	orrs	r2, r1
 80031b2:	619a      	str	r2, [r3, #24]
    LED3_OFF
 80031b4:	23a0      	movs	r3, #160	; 0xa0
 80031b6:	05db      	lsls	r3, r3, #23
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	23a0      	movs	r3, #160	; 0xa0
 80031bc:	05db      	lsls	r3, r3, #23
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0049      	lsls	r1, r1, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	619a      	str	r2, [r3, #24]
    LED4_OFF
 80031c6:	23a0      	movs	r3, #160	; 0xa0
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	23a0      	movs	r3, #160	; 0xa0
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0089      	lsls	r1, r1, #2
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
    LED5_OFF
 80031d8:	23a0      	movs	r3, #160	; 0xa0
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	23a0      	movs	r3, #160	; 0xa0
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	00c9      	lsls	r1, r1, #3
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <auto_adj_mode>:

void auto_adj_mode()
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  vr = read_adc(VR);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7ff fae7 	bl	80027cc <read_adc>
 80031fe:	0003      	movs	r3, r0
 8003200:	b21a      	sxth	r2, r3
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <auto_adj_mode+0xc0>)
 8003204:	801a      	strh	r2, [r3, #0]

  if(vr<=600) {auto_temper=80; led_con(1);}
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <auto_adj_mode+0xc0>)
 8003208:	2200      	movs	r2, #0
 800320a:	5e9a      	ldrsh	r2, [r3, r2]
 800320c:	2396      	movs	r3, #150	; 0x96
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	dc06      	bgt.n	8003222 <auto_adj_mode+0x2e>
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <auto_adj_mode+0xc4>)
 8003216:	2250      	movs	r2, #80	; 0x50
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	2001      	movs	r0, #1
 800321c:	f7ff fec4 	bl	8002fa8 <led_con>
 8003220:	e02d      	b.n	800327e <auto_adj_mode+0x8a>
  else if(vr<=1600) {auto_temper=100; led_con(2);}
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <auto_adj_mode+0xc0>)
 8003224:	2200      	movs	r2, #0
 8003226:	5e9a      	ldrsh	r2, [r3, r2]
 8003228:	23c8      	movs	r3, #200	; 0xc8
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	429a      	cmp	r2, r3
 800322e:	dc06      	bgt.n	800323e <auto_adj_mode+0x4a>
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <auto_adj_mode+0xc4>)
 8003232:	2264      	movs	r2, #100	; 0x64
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	2002      	movs	r0, #2
 8003238:	f7ff feb6 	bl	8002fa8 <led_con>
 800323c:	e01f      	b.n	800327e <auto_adj_mode+0x8a>
  else if(vr<=2600) {auto_temper=140; led_con(3);}
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <auto_adj_mode+0xc0>)
 8003240:	2200      	movs	r2, #0
 8003242:	5e9b      	ldrsh	r3, [r3, r2]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <auto_adj_mode+0xc8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	dc06      	bgt.n	8003258 <auto_adj_mode+0x64>
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <auto_adj_mode+0xc4>)
 800324c:	228c      	movs	r2, #140	; 0x8c
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	2003      	movs	r0, #3
 8003252:	f7ff fea9 	bl	8002fa8 <led_con>
 8003256:	e012      	b.n	800327e <auto_adj_mode+0x8a>
  else if(vr<=3500) {auto_temper=180; led_con(4);}
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <auto_adj_mode+0xc0>)
 800325a:	2200      	movs	r2, #0
 800325c:	5e9b      	ldrsh	r3, [r3, r2]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <auto_adj_mode+0xcc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	dc06      	bgt.n	8003272 <auto_adj_mode+0x7e>
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <auto_adj_mode+0xc4>)
 8003266:	22b4      	movs	r2, #180	; 0xb4
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	2004      	movs	r0, #4
 800326c:	f7ff fe9c 	bl	8002fa8 <led_con>
 8003270:	e005      	b.n	800327e <auto_adj_mode+0x8a>
  else {auto_temper=220; led_con(5);}
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <auto_adj_mode+0xc4>)
 8003274:	22dc      	movs	r2, #220	; 0xdc
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	2005      	movs	r0, #5
 800327a:	f7ff fe95 	bl	8002fa8 <led_con>

  if(auto_temper-temper>1) fire=9;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <auto_adj_mode+0xc4>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	001a      	movs	r2, r3
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <auto_adj_mode+0xd0>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	dd03      	ble.n	8003296 <auto_adj_mode+0xa2>
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <auto_adj_mode+0xd4>)
 8003290:	2209      	movs	r2, #9
 8003292:	701a      	strb	r2, [r3, #0]
  else if(auto_temper-temper<-1) fire=1;
}
 8003294:	e00a      	b.n	80032ac <auto_adj_mode+0xb8>
  else if(auto_temper-temper<-1) fire=1;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <auto_adj_mode+0xc4>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	001a      	movs	r2, r3
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <auto_adj_mode+0xd0>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	da02      	bge.n	80032ac <auto_adj_mode+0xb8>
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <auto_adj_mode+0xd4>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000108 	.word	0x20000108
 80032b8:	20000004 	.word	0x20000004
 80032bc:	00000a28 	.word	0x00000a28
 80032c0:	00000dac 	.word	0x00000dac
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000110 	.word	0x20000110

080032cc <alarm_set>:

void alarm_set()
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  if(!SW4 || !SW5)
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <alarm_set+0x84>)
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	01db      	lsls	r3, r3, #7
 80032d8:	4013      	ands	r3, r2
 80032da:	d005      	beq.n	80032e8 <alarm_set+0x1c>
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <alarm_set+0x84>)
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	4013      	ands	r3, r2
 80032e6:	d12c      	bne.n	8003342 <alarm_set+0x76>
  {
    if(!sw_flag)
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <alarm_set+0x88>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12c      	bne.n	800334a <alarm_set+0x7e>
    {
      if(!SW4) a_temper-=20;
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <alarm_set+0x84>)
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	01db      	lsls	r3, r3, #7
 80032f8:	4013      	ands	r3, r2
 80032fa:	d106      	bne.n	800330a <alarm_set+0x3e>
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <alarm_set+0x8c>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	3b14      	subs	r3, #20
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <alarm_set+0x8c>)
 8003306:	801a      	strh	r2, [r3, #0]
 8003308:	e005      	b.n	8003316 <alarm_set+0x4a>
      else a_temper+=20;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <alarm_set+0x8c>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	3314      	adds	r3, #20
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <alarm_set+0x8c>)
 8003314:	801a      	strh	r2, [r3, #0]

      if(a_temper>280) a_temper=280;
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <alarm_set+0x8c>)
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	238c      	movs	r3, #140	; 0x8c
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	429a      	cmp	r2, r3
 8003320:	d904      	bls.n	800332c <alarm_set+0x60>
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <alarm_set+0x8c>)
 8003324:	228c      	movs	r2, #140	; 0x8c
 8003326:	0052      	lsls	r2, r2, #1
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	e006      	b.n	800333a <alarm_set+0x6e>
      else if(a_temper<20) a_temper=20;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <alarm_set+0x8c>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2b13      	cmp	r3, #19
 8003332:	d802      	bhi.n	800333a <alarm_set+0x6e>
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <alarm_set+0x8c>)
 8003336:	2214      	movs	r2, #20
 8003338:	801a      	strh	r2, [r3, #0]

      sw_flag=1;
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <alarm_set+0x88>)
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
    if(!sw_flag)
 8003340:	e003      	b.n	800334a <alarm_set+0x7e>
    }
  }
  else sw_flag=0;
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <alarm_set+0x88>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	50000800 	.word	0x50000800
 8003354:	20000112 	.word	0x20000112
 8003358:	20000002 	.word	0x20000002

0800335c <alarm_buzz>:

void alarm_buzz()
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  if((a_temper!=20) && (a_temper<=temper))
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <alarm_buzz+0x108>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	2b14      	cmp	r3, #20
 8003366:	d06c      	beq.n	8003442 <alarm_buzz+0xe6>
 8003368:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <alarm_buzz+0x108>)
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <alarm_buzz+0x10c>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d866      	bhi.n	8003442 <alarm_buzz+0xe6>
  {
    if(alarm_flag==0)
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <alarm_buzz+0x110>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <alarm_buzz+0x30>
    {
      alarm_flag=1;
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <alarm_buzz+0x110>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
      a_count=HAL_GetTick();
 8003382:	f7fd fb2f 	bl	80009e4 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <alarm_buzz+0x114>)
 800338a:	601a      	str	r2, [r3, #0]
    }

    if(HAL_GetTick()-a_count<=100) BUZZ_ON
 800338c:	f7fd fb2a 	bl	80009e4 <HAL_GetTick>
 8003390:	0002      	movs	r2, r0
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <alarm_buzz+0x114>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b64      	cmp	r3, #100	; 0x64
 800339a:	d809      	bhi.n	80033b0 <alarm_buzz+0x54>
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	23a0      	movs	r3, #160	; 0xa0
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	0209      	lsls	r1, r1, #8
 80033aa:	430a      	orrs	r2, r1
 80033ac:	619a      	str	r2, [r3, #24]
 80033ae:	e055      	b.n	800345c <alarm_buzz+0x100>
        else if(HAL_GetTick()-a_count<=200) BUZZ_OFF
 80033b0:	f7fd fb18 	bl	80009e4 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <alarm_buzz+0x114>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2bc8      	cmp	r3, #200	; 0xc8
 80033be:	d809      	bhi.n	80033d4 <alarm_buzz+0x78>
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c6:	23a0      	movs	r3, #160	; 0xa0
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0209      	lsls	r1, r1, #8
 80033ce:	430a      	orrs	r2, r1
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_GetTick()-a_count<=100) BUZZ_ON
 80033d2:	e043      	b.n	800345c <alarm_buzz+0x100>
        else if(HAL_GetTick()-a_count<=300) BUZZ_ON
 80033d4:	f7fd fb06 	bl	80009e4 <HAL_GetTick>
 80033d8:	0002      	movs	r2, r0
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <alarm_buzz+0x114>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	2396      	movs	r3, #150	; 0x96
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d809      	bhi.n	80033fc <alarm_buzz+0xa0>
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	23a0      	movs	r3, #160	; 0xa0
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	0209      	lsls	r1, r1, #8
 80033f6:	430a      	orrs	r2, r1
 80033f8:	619a      	str	r2, [r3, #24]
    if(HAL_GetTick()-a_count<=100) BUZZ_ON
 80033fa:	e02f      	b.n	800345c <alarm_buzz+0x100>
        else if(HAL_GetTick()-a_count<=1000) BUZZ_OFF
 80033fc:	f7fd faf2 	bl	80009e4 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <alarm_buzz+0x114>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1ad2      	subs	r2, r2, r3
 8003408:	23fa      	movs	r3, #250	; 0xfa
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d809      	bhi.n	8003424 <alarm_buzz+0xc8>
 8003410:	23a0      	movs	r3, #160	; 0xa0
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	0209      	lsls	r1, r1, #8
 800341e:	430a      	orrs	r2, r1
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
    if(HAL_GetTick()-a_count<=100) BUZZ_ON
 8003422:	e01b      	b.n	800345c <alarm_buzz+0x100>
        else
        {
          BUZZ_OFF
 8003424:	23a0      	movs	r3, #160	; 0xa0
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342a:	23a0      	movs	r3, #160	; 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0209      	lsls	r1, r1, #8
 8003432:	430a      	orrs	r2, r1
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
          a_count=HAL_GetTick();
 8003436:	f7fd fad5 	bl	80009e4 <HAL_GetTick>
 800343a:	0002      	movs	r2, r0
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <alarm_buzz+0x114>)
 800343e:	601a      	str	r2, [r3, #0]
    if(HAL_GetTick()-a_count<=100) BUZZ_ON
 8003440:	e00c      	b.n	800345c <alarm_buzz+0x100>
        }
  }
  else
  {
    BUZZ_OFF
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003448:	23a0      	movs	r3, #160	; 0xa0
 800344a:	05db      	lsls	r3, r3, #23
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	0209      	lsls	r1, r1, #8
 8003450:	430a      	orrs	r2, r1
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
    alarm_flag=0;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <alarm_buzz+0x110>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
  }
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000002 	.word	0x20000002
 8003468:	20000000 	.word	0x20000000
 800346c:	20000113 	.word	0x20000113
 8003470:	20000124 	.word	0x20000124

08003474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  uint8_t b_flag=0, sw3_flag=0;
 800347a:	1dbb      	adds	r3, r7, #6
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003486:	f7fd fa57 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800348a:	f000 f923 	bl	80036d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800348e:	f000 f9ef 	bl	8003870 <MX_GPIO_Init>
  MX_ADC_Init();
 8003492:	f000 f97b 	bl	800378c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  LcdInit();
 8003496:	f7ff f889 	bl	80025ac <LcdInit>

  lcd_cgram(1,0);
 800349a:	2100      	movs	r1, #0
 800349c:	2001      	movs	r0, #1
 800349e:	f7ff f953 	bl	8002748 <lcd_cgram>

  led_ring_update(led_ring_data);
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <main+0x224>)
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7fe ff21 	bl	80022ec <led_ring_update>

  lcd_puts("\fSmart Gas Range\n              01");
 80034aa:	4b7c      	ldr	r3, [pc, #496]	; (800369c <main+0x228>)
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff f925 	bl	80026fc <lcd_puts>
  HAL_Delay(2000);
 80034b2:	23fa      	movs	r3, #250	; 0xfa
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fd fa9e 	bl	80009f8 <HAL_Delay>

  r_count = up_count = dn_count = HAL_GetTick();
 80034bc:	f7fd fa92 	bl	80009e4 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	4b77      	ldr	r3, [pc, #476]	; (80036a0 <main+0x22c>)
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <main+0x22c>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <main+0x230>)
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <main+0x230>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <main+0x234>)
 80034d4:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(SW1==0) power=1;
 80034d6:	23a0      	movs	r3, #160	; 0xa0
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2204      	movs	r2, #4
 80034de:	4013      	ands	r3, r2
 80034e0:	d103      	bne.n	80034ea <main+0x76>
 80034e2:	4b72      	ldr	r3, [pc, #456]	; (80036ac <main+0x238>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e002      	b.n	80034f0 <main+0x7c>
    else power=0;
 80034ea:	4b70      	ldr	r3, [pc, #448]	; (80036ac <main+0x238>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]

    if(temper>300)
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <main+0x23c>)
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	2396      	movs	r3, #150	; 0x96
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d90a      	bls.n	8003512 <main+0x9e>
    {
      over_heat=1;
 80034fc:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <main+0x240>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
      b_flag=1;
 8003502:	1dbb      	adds	r3, r7, #6
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
      b_count=HAL_GetTick();
 8003508:	f7fd fa6c 	bl	80009e4 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <main+0x244>)
 8003510:	601a      	str	r2, [r3, #0]
    }

    if(!SW2) safe_lock=1;
 8003512:	23a0      	movs	r3, #160	; 0xa0
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2210      	movs	r2, #16
 800351a:	4013      	ands	r3, r2
 800351c:	d102      	bne.n	8003524 <main+0xb0>
 800351e:	4b67      	ldr	r3, [pc, #412]	; (80036bc <main+0x248>)
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]

    if(!SW3)
 8003524:	23a0      	movs	r3, #160	; 0xa0
 8003526:	05db      	lsls	r3, r3, #23
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2208      	movs	r2, #8
 800352c:	4013      	ands	r3, r2
 800352e:	d112      	bne.n	8003556 <main+0xe2>
    {
      if(!sw3_flag)
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <main+0xda>
      {
        if(!auto_adj) auto_adj=1;
 8003538:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <main+0x24c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <main+0xd4>
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <main+0x24c>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e002      	b.n	800354e <main+0xda>
        else auto_adj=0;
 8003548:	4b5d      	ldr	r3, [pc, #372]	; (80036c0 <main+0x24c>)
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
      }
      sw3_flag=1;
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e002      	b.n	800355c <main+0xe8>
    }
    else sw3_flag=0;
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]

    status_cal();
 800355c:	f7ff f96e 	bl	800283c <status_cal>

    alarm_set();
 8003560:	f7ff feb4 	bl	80032cc <alarm_set>

    if(power && status!=OVER_HEAT && status!=SAFE_LOCK) alarm_buzz();
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <main+0x238>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <main+0x10c>
 800356c:	4b55      	ldr	r3, [pc, #340]	; (80036c4 <main+0x250>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d005      	beq.n	8003580 <main+0x10c>
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <main+0x250>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d001      	beq.n	8003580 <main+0x10c>
 800357c:	f7ff feee 	bl	800335c <alarm_buzz>

    if(status==OFF) fire=0;
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <main+0x250>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <main+0x11c>
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <main+0x254>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e006      	b.n	800359e <main+0x12a>
    else if(status==ON_NONE) fire=1;
 8003590:	4b4c      	ldr	r3, [pc, #304]	; (80036c4 <main+0x250>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d102      	bne.n	800359e <main+0x12a>
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <main+0x254>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]

    if(status==OVER_HEAT)
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <main+0x250>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d112      	bne.n	80035cc <main+0x158>
    {
      fire=0;
 80035a6:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <main+0x254>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
      buzz_3sound(&b_flag);
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff fc64 	bl	8002e7c <buzz_3sound>
      if((!power) && temper<150) over_heat=0;
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <main+0x238>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11d      	bne.n	80035f8 <main+0x184>
 80035bc:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <main+0x23c>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	2b95      	cmp	r3, #149	; 0x95
 80035c2:	d819      	bhi.n	80035f8 <main+0x184>
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <main+0x240>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e015      	b.n	80035f8 <main+0x184>
    }

    else if(status==SAFE_LOCK)
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <main+0x250>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d111      	bne.n	80035f8 <main+0x184>
    {
      fire=0;
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <main+0x254>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
      if(SW2 && SW1) safe_lock=0;
 80035da:	23a0      	movs	r3, #160	; 0xa0
 80035dc:	05db      	lsls	r3, r3, #23
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2210      	movs	r2, #16
 80035e2:	4013      	ands	r3, r2
 80035e4:	d008      	beq.n	80035f8 <main+0x184>
 80035e6:	23a0      	movs	r3, #160	; 0xa0
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2204      	movs	r2, #4
 80035ee:	4013      	ands	r3, r2
 80035f0:	d002      	beq.n	80035f8 <main+0x184>
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <main+0x248>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
    }

    if(status==ON)
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <main+0x250>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d13a      	bne.n	8003676 <main+0x202>
    {
      vr = read_adc(VR);
 8003600:	2001      	movs	r0, #1
 8003602:	f7ff f8e3 	bl	80027cc <read_adc>
 8003606:	0003      	movs	r3, r0
 8003608:	b21a      	sxth	r2, r3
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <main+0x258>)
 800360c:	801a      	strh	r2, [r3, #0]
      vr-=65;
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <main+0x258>)
 8003610:	2200      	movs	r2, #0
 8003612:	5e9b      	ldrsh	r3, [r3, r2]
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b41      	subs	r3, #65	; 0x41
 8003618:	b29b      	uxth	r3, r3
 800361a:	b21a      	sxth	r2, r3
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <main+0x258>)
 800361e:	801a      	strh	r2, [r3, #0]
      if(vr<0) vr=0;
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <main+0x258>)
 8003622:	2200      	movs	r2, #0
 8003624:	5e9b      	ldrsh	r3, [r3, r2]
 8003626:	2b00      	cmp	r3, #0
 8003628:	da02      	bge.n	8003630 <main+0x1bc>
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <main+0x258>)
 800362c:	2200      	movs	r2, #0
 800362e:	801a      	strh	r2, [r3, #0]
      vr/=503.75;
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <main+0x258>)
 8003632:	2200      	movs	r2, #0
 8003634:	5e9b      	ldrsh	r3, [r3, r2]
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd f930 	bl	800089c <__aeabi_i2d>
 800363c:	2200      	movs	r2, #0
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <main+0x25c>)
 8003640:	f7fc fe00 	bl	8000244 <__aeabi_ddiv>
 8003644:	0002      	movs	r2, r0
 8003646:	000b      	movs	r3, r1
 8003648:	0010      	movs	r0, r2
 800364a:	0019      	movs	r1, r3
 800364c:	f7fd f8f0 	bl	8000830 <__aeabi_d2iz>
 8003650:	0003      	movs	r3, r0
 8003652:	b21a      	sxth	r2, r3
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <main+0x258>)
 8003656:	801a      	strh	r2, [r3, #0]
      vr+=1;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <main+0x258>)
 800365a:	2200      	movs	r2, #0
 800365c:	5e9b      	ldrsh	r3, [r3, r2]
 800365e:	b29b      	uxth	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	b29b      	uxth	r3, r3
 8003664:	b21a      	sxth	r2, r3
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <main+0x258>)
 8003668:	801a      	strh	r2, [r3, #0]

      fire=vr;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <main+0x258>)
 800366c:	2200      	movs	r2, #0
 800366e:	5e9b      	ldrsh	r3, [r3, r2]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <main+0x254>)
 8003674:	701a      	strb	r2, [r3, #0]
    }

    if(status==AUTO_ADJ)
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <main+0x250>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b04      	cmp	r3, #4
 800367c:	d102      	bne.n	8003684 <main+0x210>
    {
      auto_adj_mode();
 800367e:	f7ff fdb9 	bl	80031f4 <auto_adj_mode>
 8003682:	e002      	b.n	800368a <main+0x216>
    }
    else led_con(0);
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fc8f 	bl	8002fa8 <led_con>

    led_ring();
 800368a:	f7ff f999 	bl	80029c0 <led_ring>

    temper_updown();
 800368e:	f7ff fb39 	bl	8002d04 <temper_updown>

    lcd_dis();
 8003692:	f7ff f92d 	bl	80028f0 <lcd_dis>
    if(SW1==0) power=1;
 8003696:	e71e      	b.n	80034d6 <main+0x62>
 8003698:	20000178 	.word	0x20000178
 800369c:	080045a4 	.word	0x080045a4
 80036a0:	2000011c 	.word	0x2000011c
 80036a4:	20000118 	.word	0x20000118
 80036a8:	20000114 	.word	0x20000114
 80036ac:	2000010b 	.word	0x2000010b
 80036b0:	20000000 	.word	0x20000000
 80036b4:	2000010e 	.word	0x2000010e
 80036b8:	20000120 	.word	0x20000120
 80036bc:	2000010d 	.word	0x2000010d
 80036c0:	2000010c 	.word	0x2000010c
 80036c4:	2000010a 	.word	0x2000010a
 80036c8:	20000110 	.word	0x20000110
 80036cc:	20000108 	.word	0x20000108
 80036d0:	407f7c00 	.word	0x407f7c00

080036d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b095      	sub	sp, #84	; 0x54
 80036d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036da:	2418      	movs	r4, #24
 80036dc:	193b      	adds	r3, r7, r4
 80036de:	0018      	movs	r0, r3
 80036e0:	2338      	movs	r3, #56	; 0x38
 80036e2:	001a      	movs	r2, r3
 80036e4:	2100      	movs	r1, #0
 80036e6:	f000 fa9d 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	0018      	movs	r0, r3
 80036ee:	2314      	movs	r3, #20
 80036f0:	001a      	movs	r2, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	f000 fa96 	bl	8003c24 <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <SystemClock_Config+0xb0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a22      	ldr	r2, [pc, #136]	; (8003788 <SystemClock_Config+0xb4>)
 80036fe:	401a      	ands	r2, r3
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <SystemClock_Config+0xb0>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	0109      	lsls	r1, r1, #4
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800370a:	0021      	movs	r1, r4
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2202      	movs	r2, #2
 8003710:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2201      	movs	r2, #1
 8003716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003718:	187b      	adds	r3, r7, r1
 800371a:	2210      	movs	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371e:	187b      	adds	r3, r7, r1
 8003720:	2202      	movs	r2, #2
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003724:	187b      	adds	r3, r7, r1
 8003726:	2200      	movs	r2, #0
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800372a:	187b      	adds	r3, r7, r1
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	02d2      	lsls	r2, r2, #11
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003732:	187b      	adds	r3, r7, r1
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	03d2      	lsls	r2, r2, #15
 8003738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800373a:	187b      	adds	r3, r7, r1
 800373c:	0018      	movs	r0, r3
 800373e:	f7fe f833 	bl	80017a8 <HAL_RCC_OscConfig>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003746:	f000 f93f 	bl	80039c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	220f      	movs	r2, #15
 800374e:	601a      	str	r2, [r3, #0]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	2203      	movs	r2, #3
 8003754:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2101      	movs	r1, #1
 800376c:	0018      	movs	r0, r3
 800376e:	f7fe fbdb 	bl	8001f28 <HAL_RCC_ClockConfig>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d001      	beq.n	800377a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003776:	f000 f927 	bl	80039c8 <Error_Handler>
  }
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b015      	add	sp, #84	; 0x54
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	40007000 	.word	0x40007000
 8003788:	ffffe7ff 	.word	0xffffe7ff

0800378c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003792:	003b      	movs	r3, r7
 8003794:	0018      	movs	r0, r3
 8003796:	2308      	movs	r3, #8
 8003798:	001a      	movs	r2, r3
 800379a:	2100      	movs	r1, #0
 800379c:	f000 fa42 	bl	8003c24 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
   */
  hadc.Instance = ADC1;
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <MX_ADC_Init+0xd8>)
 80037a2:	4a31      	ldr	r2, [pc, #196]	; (8003868 <MX_ADC_Init+0xdc>)
 80037a4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <MX_ADC_Init+0xd8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <MX_ADC_Init+0xd8>)
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	05d2      	lsls	r2, r2, #23
 80037b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <MX_ADC_Init+0xd8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <MX_ADC_Init+0xd8>)
 80037bc:	2207      	movs	r2, #7
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <MX_ADC_Init+0xd8>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <MX_ADC_Init+0xd8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <MX_ADC_Init+0xd8>)
 80037ce:	2220      	movs	r2, #32
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <MX_ADC_Init+0xd8>)
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <MX_ADC_Init+0xd8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <MX_ADC_Init+0xd8>)
 80037e4:	22c2      	movs	r2, #194	; 0xc2
 80037e6:	32ff      	adds	r2, #255	; 0xff
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <MX_ADC_Init+0xd8>)
 80037ec:	222c      	movs	r2, #44	; 0x2c
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <MX_ADC_Init+0xd8>)
 80037f4:	2204      	movs	r2, #4
 80037f6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <MX_ADC_Init+0xd8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <MX_ADC_Init+0xd8>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <MX_ADC_Init+0xd8>)
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <MX_ADC_Init+0xd8>)
 800380c:	2200      	movs	r2, #0
 800380e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <MX_ADC_Init+0xd8>)
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd f90e 	bl	8000a34 <HAL_ADC_Init>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d001      	beq.n	8003820 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800381c:	f000 f8d4 	bl	80039c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8003820:	003b      	movs	r3, r7
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003826:	003b      	movs	r3, r7
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	0152      	lsls	r2, r2, #5
 800382c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800382e:	003a      	movs	r2, r7
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_ADC_Init+0xd8>)
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f7fd fba7 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d001      	beq.n	8003842 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800383e:	f000 f8c3 	bl	80039c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8003842:	003b      	movs	r3, r7
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <MX_ADC_Init+0xe0>)
 8003846:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003848:	003a      	movs	r2, r7
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_ADC_Init+0xd8>)
 800384c:	0011      	movs	r1, r2
 800384e:	0018      	movs	r0, r3
 8003850:	f7fd fb9a 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003858:	f000 f8b6 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200000ac 	.word	0x200000ac
 8003868:	40012400 	.word	0x40012400
 800386c:	04000002 	.word	0x04000002

08003870 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003876:	240c      	movs	r4, #12
 8003878:	193b      	adds	r3, r7, r4
 800387a:	0018      	movs	r0, r3
 800387c:	2314      	movs	r3, #20
 800387e:	001a      	movs	r2, r3
 8003880:	2100      	movs	r1, #0
 8003882:	f000 f9cf 	bl	8003c24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003886:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <MX_GPIO_Init+0x144>)
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <MX_GPIO_Init+0x144>)
 800388c:	2104      	movs	r1, #4
 800388e:	430a      	orrs	r2, r1
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
 8003892:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <MX_GPIO_Init+0x144>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	2204      	movs	r2, #4
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038a4:	2101      	movs	r1, #1
 80038a6:	430a      	orrs	r2, r1
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038bc:	2102      	movs	r1, #2
 80038be:	430a      	orrs	r2, r1
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <MX_GPIO_Init+0x144>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RING_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 80038ce:	493a      	ldr	r1, [pc, #232]	; (80039b8 <MX_GPIO_Init+0x148>)
 80038d0:	23a0      	movs	r3, #160	; 0xa0
 80038d2:	05db      	lsls	r3, r3, #23
 80038d4:	2200      	movs	r2, #0
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fd ff49 	bl	800176e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80038dc:	23f8      	movs	r3, #248	; 0xf8
 80038de:	00d9      	lsls	r1, r3, #3
 80038e0:	23a0      	movs	r3, #160	; 0xa0
 80038e2:	05db      	lsls	r3, r3, #23
 80038e4:	2201      	movs	r2, #1
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fd ff41 	bl	800176e <HAL_GPIO_WritePin>
      |LED5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <MX_GPIO_Init+0x14c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	21fb      	movs	r1, #251	; 0xfb
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fd ff3b 	bl	800176e <HAL_GPIO_WritePin>
      |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_A_Pin SW_B_Pin */
  GPIO_InitStruct.Pin = SW_A_Pin|SW_B_Pin;
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	22c0      	movs	r2, #192	; 0xc0
 80038fc:	0212      	lsls	r2, r2, #8
 80038fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003900:	193b      	adds	r3, r7, r4
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003906:	193b      	adds	r3, r7, r4
 8003908:	2201      	movs	r2, #1
 800390a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390c:	193b      	adds	r3, r7, r4
 800390e:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <MX_GPIO_Init+0x150>)
 8003910:	0019      	movs	r1, r3
 8003912:	0010      	movs	r0, r2
 8003914:	f7fd fd98 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ON_Pin SW_AUTO_Pin SW_LOCK_Pin */
  GPIO_InitStruct.Pin = SW_ON_Pin|SW_AUTO_Pin|SW_LOCK_Pin;
 8003918:	193b      	adds	r3, r7, r4
 800391a:	221c      	movs	r2, #28
 800391c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800391e:	193b      	adds	r3, r7, r4
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003924:	193b      	adds	r3, r7, r4
 8003926:	2201      	movs	r2, #1
 8003928:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392a:	193a      	adds	r2, r7, r4
 800392c:	23a0      	movs	r3, #160	; 0xa0
 800392e:	05db      	lsls	r3, r3, #23
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f7fd fd88 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RING_Pin */
  GPIO_InitStruct.Pin = LED_RING_Pin;
 8003938:	193b      	adds	r3, r7, r4
 800393a:	2220      	movs	r2, #32
 800393c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2211      	movs	r2, #17
 8003942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	193b      	adds	r3, r7, r4
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394a:	193b      	adds	r3, r7, r4
 800394c:	2203      	movs	r2, #3
 800394e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RING_GPIO_Port, &GPIO_InitStruct);
 8003950:	193a      	adds	r2, r7, r4
 8003952:	23a0      	movs	r3, #160	; 0xa0
 8003954:	05db      	lsls	r3, r3, #23
 8003956:	0011      	movs	r1, r2
 8003958:	0018      	movs	r0, r3
 800395a:	f7fd fd75 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin 
                           LED5_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 800395e:	193b      	adds	r3, r7, r4
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <MX_GPIO_Init+0x154>)
 8003962:	601a      	str	r2, [r3, #0]
      |LED5_Pin|BUZZ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003964:	193b      	adds	r3, r7, r4
 8003966:	2201      	movs	r2, #1
 8003968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	193b      	adds	r3, r7, r4
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	193b      	adds	r3, r7, r4
 8003972:	2203      	movs	r2, #3
 8003974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003976:	193a      	adds	r2, r7, r4
 8003978:	23a0      	movs	r3, #160	; 0xa0
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7fd fd62 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin 
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
 8003984:	0021      	movs	r1, r4
 8003986:	187b      	adds	r3, r7, r1
 8003988:	22fb      	movs	r2, #251	; 0xfb
 800398a:	601a      	str	r2, [r3, #0]
      |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398c:	187b      	adds	r3, r7, r1
 800398e:	2201      	movs	r2, #1
 8003990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	187b      	adds	r3, r7, r1
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	187b      	adds	r3, r7, r1
 800399a:	2203      	movs	r2, #3
 800399c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	4a06      	ldr	r2, [pc, #24]	; (80039bc <MX_GPIO_Init+0x14c>)
 80039a2:	0019      	movs	r1, r3
 80039a4:	0010      	movs	r0, r2
 80039a6:	f7fd fd4f 	bl	8001448 <HAL_GPIO_Init>

}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b009      	add	sp, #36	; 0x24
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	40021000 	.word	0x40021000
 80039b8:	00008020 	.word	0x00008020
 80039bc:	50000400 	.word	0x50000400
 80039c0:	50000800 	.word	0x50000800
 80039c4:	000087c0 	.word	0x000087c0

080039c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_MspInit+0x24>)
 80039da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_MspInit+0x24>)
 80039de:	2101      	movs	r1, #1
 80039e0:	430a      	orrs	r2, r1
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <HAL_MspInit+0x24>)
 80039e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_MspInit+0x24>)
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	0549      	lsls	r1, r1, #21
 80039ee:	430a      	orrs	r2, r1
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	240c      	movs	r4, #12
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	2314      	movs	r3, #20
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f000 f908 	bl	8003c24 <memset>
  if(hadc->Instance==ADC1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <HAL_ADC_MspInit+0x70>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d122      	bne.n	8003a64 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_ADC_MspInit+0x74>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_ADC_MspInit+0x74>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0089      	lsls	r1, r1, #2
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_ADC_MspInit+0x74>)
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_ADC_MspInit+0x74>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <HAL_ADC_MspInit+0x74>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	2203      	movs	r2, #3
 8003a48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	193a      	adds	r2, r7, r4
 8003a58:	23a0      	movs	r3, #160	; 0xa0
 8003a5a:	05db      	lsls	r3, r3, #23
 8003a5c:	0011      	movs	r1, r2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7fd fcf2 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b009      	add	sp, #36	; 0x24
 8003a6a:	bd90      	pop	{r4, r7, pc}
 8003a6c:	40012400 	.word	0x40012400
 8003a70:	40021000 	.word	0x40021000

08003a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <HardFault_Handler+0x4>

08003a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a9c:	f7fc ff96 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <_sbrk+0x50>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <_sbrk+0x16>
		heap_end = &end;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <_sbrk+0x50>)
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <_sbrk+0x54>)
 8003abc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <_sbrk+0x50>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <_sbrk+0x50>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	18d2      	adds	r2, r2, r3
 8003acc:	466b      	mov	r3, sp
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d907      	bls.n	8003ae2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003ad2:	f000 f87d 	bl	8003bd0 <__errno>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	220c      	movs	r2, #12
 8003ada:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	425b      	negs	r3, r3
 8003ae0:	e006      	b.n	8003af0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <_sbrk+0x50>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	18d2      	adds	r2, r2, r3
 8003aea:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <_sbrk+0x50>)
 8003aec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200001a8 	.word	0x200001a8
 8003afc:	200001bc 	.word	0x200001bc

08003b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <SystemInit+0x64>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <SystemInit+0x64>)
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	0049      	lsls	r1, r1, #1
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <SystemInit+0x64>)
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <SystemInit+0x64>)
 8003b18:	4913      	ldr	r1, [pc, #76]	; (8003b68 <SystemInit+0x68>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <SystemInit+0x64>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <SystemInit+0x64>)
 8003b24:	4911      	ldr	r1, [pc, #68]	; (8003b6c <SystemInit+0x6c>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <SystemInit+0x64>)
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <SystemInit+0x64>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	438a      	bics	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <SystemInit+0x64>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <SystemInit+0x64>)
 8003b3c:	490c      	ldr	r1, [pc, #48]	; (8003b70 <SystemInit+0x70>)
 8003b3e:	400a      	ands	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <SystemInit+0x64>)
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <SystemInit+0x64>)
 8003b48:	490a      	ldr	r1, [pc, #40]	; (8003b74 <SystemInit+0x74>)
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SystemInit+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <SystemInit+0x78>)
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	0512      	lsls	r2, r2, #20
 8003b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	40021000 	.word	0x40021000
 8003b68:	88ff400c 	.word	0x88ff400c
 8003b6c:	fef6fff6 	.word	0xfef6fff6
 8003b70:	fffbffff 	.word	0xfffbffff
 8003b74:	ff02ffff 	.word	0xff02ffff
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b82:	e003      	b.n	8003b8c <LoopCopyDataInit>

08003b84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b8a:	3104      	adds	r1, #4

08003b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b8c:	480b      	ldr	r0, [pc, #44]	; (8003bbc <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b94:	d3f6      	bcc.n	8003b84 <CopyDataInit>
  ldr  r2, =_sbss
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b98:	e002      	b.n	8003ba0 <LoopFillZerobss>

08003b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b9a:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b9c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9e:	3204      	adds	r2, #4

08003ba0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <LoopForever+0x16>)
  cmp  r2, r3
 8003ba2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ba4:	d3f9      	bcc.n	8003b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ba6:	f7ff ffab 	bl	8003b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003baa:	f000 f817 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bae:	f7ff fc61 	bl	8003474 <main>

08003bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb2:	e7fe      	b.n	8003bb2 <LoopForever>
   ldr   r0, =_estack
 8003bb4:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003bb8:	08004660 	.word	0x08004660
  ldr  r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bc0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003bc4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003bc8:	200001bc 	.word	0x200001bc

08003bcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC1_COMP_IRQHandler>
	...

08003bd0 <__errno>:
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <__errno+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	4770      	bx	lr
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20000028 	.word	0x20000028

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	2600      	movs	r6, #0
 8003be0:	4d0c      	ldr	r5, [pc, #48]	; (8003c14 <__libc_init_array+0x38>)
 8003be2:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	2600      	movs	r6, #0
 8003bee:	f000 fc8b 	bl	8004508 <_init>
 8003bf2:	4d0a      	ldr	r5, [pc, #40]	; (8003c1c <__libc_init_array+0x40>)
 8003bf4:	4c0a      	ldr	r4, [pc, #40]	; (8003c20 <__libc_init_array+0x44>)
 8003bf6:	1b64      	subs	r4, r4, r5
 8003bf8:	10a4      	asrs	r4, r4, #2
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	00b3      	lsls	r3, r6, #2
 8003c02:	58eb      	ldr	r3, [r5, r3]
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	00b3      	lsls	r3, r6, #2
 8003c0c:	58eb      	ldr	r3, [r5, r3]
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08004658 	.word	0x08004658
 8003c18:	08004658 	.word	0x08004658
 8003c1c:	08004658 	.word	0x08004658
 8003c20:	0800465c 	.word	0x0800465c

08003c24 <memset>:
 8003c24:	0003      	movs	r3, r0
 8003c26:	1882      	adds	r2, r0, r2
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	7019      	strb	r1, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <siprintf>:
 8003c34:	b40e      	push	{r1, r2, r3}
 8003c36:	b500      	push	{lr}
 8003c38:	490b      	ldr	r1, [pc, #44]	; (8003c68 <siprintf+0x34>)
 8003c3a:	b09c      	sub	sp, #112	; 0x70
 8003c3c:	ab1d      	add	r3, sp, #116	; 0x74
 8003c3e:	9002      	str	r0, [sp, #8]
 8003c40:	9006      	str	r0, [sp, #24]
 8003c42:	9107      	str	r1, [sp, #28]
 8003c44:	9104      	str	r1, [sp, #16]
 8003c46:	4809      	ldr	r0, [pc, #36]	; (8003c6c <siprintf+0x38>)
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <siprintf+0x3c>)
 8003c4a:	cb04      	ldmia	r3!, {r2}
 8003c4c:	9105      	str	r1, [sp, #20]
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	a902      	add	r1, sp, #8
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	f000 f870 	bl	8003d38 <_svfiprintf_r>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9a02      	ldr	r2, [sp, #8]
 8003c5c:	7013      	strb	r3, [r2, #0]
 8003c5e:	b01c      	add	sp, #112	; 0x70
 8003c60:	bc08      	pop	{r3}
 8003c62:	b003      	add	sp, #12
 8003c64:	4718      	bx	r3
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	7fffffff 	.word	0x7fffffff
 8003c6c:	20000028 	.word	0x20000028
 8003c70:	ffff0208 	.word	0xffff0208

08003c74 <__ssputs_r>:
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	688e      	ldr	r6, [r1, #8]
 8003c78:	b085      	sub	sp, #20
 8003c7a:	0007      	movs	r7, r0
 8003c7c:	000c      	movs	r4, r1
 8003c7e:	9203      	str	r2, [sp, #12]
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	429e      	cmp	r6, r3
 8003c84:	d83c      	bhi.n	8003d00 <__ssputs_r+0x8c>
 8003c86:	2390      	movs	r3, #144	; 0x90
 8003c88:	898a      	ldrh	r2, [r1, #12]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	421a      	tst	r2, r3
 8003c8e:	d034      	beq.n	8003cfa <__ssputs_r+0x86>
 8003c90:	6909      	ldr	r1, [r1, #16]
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	6960      	ldr	r0, [r4, #20]
 8003c96:	1a5b      	subs	r3, r3, r1
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	4343      	muls	r3, r0
 8003c9e:	0fdd      	lsrs	r5, r3, #31
 8003ca0:	18ed      	adds	r5, r5, r3
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	9802      	ldr	r0, [sp, #8]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	181b      	adds	r3, r3, r0
 8003caa:	106d      	asrs	r5, r5, #1
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	d900      	bls.n	8003cb2 <__ssputs_r+0x3e>
 8003cb0:	001d      	movs	r5, r3
 8003cb2:	0553      	lsls	r3, r2, #21
 8003cb4:	d532      	bpl.n	8003d1c <__ssputs_r+0xa8>
 8003cb6:	0029      	movs	r1, r5
 8003cb8:	0038      	movs	r0, r7
 8003cba:	f000 fb53 	bl	8004364 <_malloc_r>
 8003cbe:	1e06      	subs	r6, r0, #0
 8003cc0:	d109      	bne.n	8003cd6 <__ssputs_r+0x62>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	2001      	movs	r0, #1
 8003cca:	89a2      	ldrh	r2, [r4, #12]
 8003ccc:	4240      	negs	r0, r0
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	b005      	add	sp, #20
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd6:	9a02      	ldr	r2, [sp, #8]
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	f000 faba 	bl	8004252 <memcpy>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <__ssputs_r+0xc0>)
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	9b02      	ldr	r3, [sp, #8]
 8003cec:	6126      	str	r6, [r4, #16]
 8003cee:	18f6      	adds	r6, r6, r3
 8003cf0:	6026      	str	r6, [r4, #0]
 8003cf2:	6165      	str	r5, [r4, #20]
 8003cf4:	9e01      	ldr	r6, [sp, #4]
 8003cf6:	1aed      	subs	r5, r5, r3
 8003cf8:	60a5      	str	r5, [r4, #8]
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	429e      	cmp	r6, r3
 8003cfe:	d900      	bls.n	8003d02 <__ssputs_r+0x8e>
 8003d00:	9e01      	ldr	r6, [sp, #4]
 8003d02:	0032      	movs	r2, r6
 8003d04:	9903      	ldr	r1, [sp, #12]
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	f000 faac 	bl	8004264 <memmove>
 8003d0c:	68a3      	ldr	r3, [r4, #8]
 8003d0e:	2000      	movs	r0, #0
 8003d10:	1b9b      	subs	r3, r3, r6
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	199e      	adds	r6, r3, r6
 8003d18:	6026      	str	r6, [r4, #0]
 8003d1a:	e7da      	b.n	8003cd2 <__ssputs_r+0x5e>
 8003d1c:	002a      	movs	r2, r5
 8003d1e:	0038      	movs	r0, r7
 8003d20:	f000 fb96 	bl	8004450 <_realloc_r>
 8003d24:	1e06      	subs	r6, r0, #0
 8003d26:	d1e0      	bne.n	8003cea <__ssputs_r+0x76>
 8003d28:	0038      	movs	r0, r7
 8003d2a:	6921      	ldr	r1, [r4, #16]
 8003d2c:	f000 faae 	bl	800428c <_free_r>
 8003d30:	e7c7      	b.n	8003cc2 <__ssputs_r+0x4e>
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	fffffb7f 	.word	0xfffffb7f

08003d38 <_svfiprintf_r>:
 8003d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3a:	b0a1      	sub	sp, #132	; 0x84
 8003d3c:	9003      	str	r0, [sp, #12]
 8003d3e:	001d      	movs	r5, r3
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	000f      	movs	r7, r1
 8003d44:	0016      	movs	r6, r2
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	d511      	bpl.n	8003d6e <_svfiprintf_r+0x36>
 8003d4a:	690b      	ldr	r3, [r1, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10e      	bne.n	8003d6e <_svfiprintf_r+0x36>
 8003d50:	2140      	movs	r1, #64	; 0x40
 8003d52:	f000 fb07 	bl	8004364 <_malloc_r>
 8003d56:	6038      	str	r0, [r7, #0]
 8003d58:	6138      	str	r0, [r7, #16]
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d105      	bne.n	8003d6a <_svfiprintf_r+0x32>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	9a03      	ldr	r2, [sp, #12]
 8003d62:	3801      	subs	r0, #1
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	b021      	add	sp, #132	; 0x84
 8003d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d6a:	2340      	movs	r3, #64	; 0x40
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	ac08      	add	r4, sp, #32
 8003d72:	6163      	str	r3, [r4, #20]
 8003d74:	3320      	adds	r3, #32
 8003d76:	7663      	strb	r3, [r4, #25]
 8003d78:	3310      	adds	r3, #16
 8003d7a:	76a3      	strb	r3, [r4, #26]
 8003d7c:	9507      	str	r5, [sp, #28]
 8003d7e:	0035      	movs	r5, r6
 8003d80:	782b      	ldrb	r3, [r5, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <_svfiprintf_r+0x52>
 8003d86:	2b25      	cmp	r3, #37	; 0x25
 8003d88:	d147      	bne.n	8003e1a <_svfiprintf_r+0xe2>
 8003d8a:	1bab      	subs	r3, r5, r6
 8003d8c:	9305      	str	r3, [sp, #20]
 8003d8e:	42b5      	cmp	r5, r6
 8003d90:	d00c      	beq.n	8003dac <_svfiprintf_r+0x74>
 8003d92:	0032      	movs	r2, r6
 8003d94:	0039      	movs	r1, r7
 8003d96:	9803      	ldr	r0, [sp, #12]
 8003d98:	f7ff ff6c 	bl	8003c74 <__ssputs_r>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d100      	bne.n	8003da2 <_svfiprintf_r+0x6a>
 8003da0:	e0ae      	b.n	8003f00 <_svfiprintf_r+0x1c8>
 8003da2:	6962      	ldr	r2, [r4, #20]
 8003da4:	9b05      	ldr	r3, [sp, #20]
 8003da6:	4694      	mov	ip, r2
 8003da8:	4463      	add	r3, ip
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	782b      	ldrb	r3, [r5, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d100      	bne.n	8003db4 <_svfiprintf_r+0x7c>
 8003db2:	e0a5      	b.n	8003f00 <_svfiprintf_r+0x1c8>
 8003db4:	2201      	movs	r2, #1
 8003db6:	2300      	movs	r3, #0
 8003db8:	4252      	negs	r2, r2
 8003dba:	6062      	str	r2, [r4, #4]
 8003dbc:	a904      	add	r1, sp, #16
 8003dbe:	3254      	adds	r2, #84	; 0x54
 8003dc0:	1852      	adds	r2, r2, r1
 8003dc2:	1c6e      	adds	r6, r5, #1
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	60e3      	str	r3, [r4, #12]
 8003dc8:	60a3      	str	r3, [r4, #8]
 8003dca:	7013      	strb	r3, [r2, #0]
 8003dcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003dce:	2205      	movs	r2, #5
 8003dd0:	7831      	ldrb	r1, [r6, #0]
 8003dd2:	4854      	ldr	r0, [pc, #336]	; (8003f24 <_svfiprintf_r+0x1ec>)
 8003dd4:	f000 fa32 	bl	800423c <memchr>
 8003dd8:	1c75      	adds	r5, r6, #1
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d11f      	bne.n	8003e1e <_svfiprintf_r+0xe6>
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	06d3      	lsls	r3, r2, #27
 8003de2:	d504      	bpl.n	8003dee <_svfiprintf_r+0xb6>
 8003de4:	2353      	movs	r3, #83	; 0x53
 8003de6:	a904      	add	r1, sp, #16
 8003de8:	185b      	adds	r3, r3, r1
 8003dea:	2120      	movs	r1, #32
 8003dec:	7019      	strb	r1, [r3, #0]
 8003dee:	0713      	lsls	r3, r2, #28
 8003df0:	d504      	bpl.n	8003dfc <_svfiprintf_r+0xc4>
 8003df2:	2353      	movs	r3, #83	; 0x53
 8003df4:	a904      	add	r1, sp, #16
 8003df6:	185b      	adds	r3, r3, r1
 8003df8:	212b      	movs	r1, #43	; 0x2b
 8003dfa:	7019      	strb	r1, [r3, #0]
 8003dfc:	7833      	ldrb	r3, [r6, #0]
 8003dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8003e00:	d016      	beq.n	8003e30 <_svfiprintf_r+0xf8>
 8003e02:	0035      	movs	r5, r6
 8003e04:	2100      	movs	r1, #0
 8003e06:	200a      	movs	r0, #10
 8003e08:	68e3      	ldr	r3, [r4, #12]
 8003e0a:	782a      	ldrb	r2, [r5, #0]
 8003e0c:	1c6e      	adds	r6, r5, #1
 8003e0e:	3a30      	subs	r2, #48	; 0x30
 8003e10:	2a09      	cmp	r2, #9
 8003e12:	d94e      	bls.n	8003eb2 <_svfiprintf_r+0x17a>
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d111      	bne.n	8003e3c <_svfiprintf_r+0x104>
 8003e18:	e017      	b.n	8003e4a <_svfiprintf_r+0x112>
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	e7b0      	b.n	8003d80 <_svfiprintf_r+0x48>
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <_svfiprintf_r+0x1ec>)
 8003e20:	6822      	ldr	r2, [r4, #0]
 8003e22:	1ac0      	subs	r0, r0, r3
 8003e24:	2301      	movs	r3, #1
 8003e26:	4083      	lsls	r3, r0
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	002e      	movs	r6, r5
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	e7ce      	b.n	8003dce <_svfiprintf_r+0x96>
 8003e30:	9b07      	ldr	r3, [sp, #28]
 8003e32:	1d19      	adds	r1, r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	9107      	str	r1, [sp, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db01      	blt.n	8003e40 <_svfiprintf_r+0x108>
 8003e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e3e:	e004      	b.n	8003e4a <_svfiprintf_r+0x112>
 8003e40:	425b      	negs	r3, r3
 8003e42:	60e3      	str	r3, [r4, #12]
 8003e44:	2302      	movs	r3, #2
 8003e46:	4313      	orrs	r3, r2
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	782b      	ldrb	r3, [r5, #0]
 8003e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e4e:	d10a      	bne.n	8003e66 <_svfiprintf_r+0x12e>
 8003e50:	786b      	ldrb	r3, [r5, #1]
 8003e52:	2b2a      	cmp	r3, #42	; 0x2a
 8003e54:	d135      	bne.n	8003ec2 <_svfiprintf_r+0x18a>
 8003e56:	9b07      	ldr	r3, [sp, #28]
 8003e58:	3502      	adds	r5, #2
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	9207      	str	r2, [sp, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db2b      	blt.n	8003ebc <_svfiprintf_r+0x184>
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	4e30      	ldr	r6, [pc, #192]	; (8003f28 <_svfiprintf_r+0x1f0>)
 8003e68:	2203      	movs	r2, #3
 8003e6a:	0030      	movs	r0, r6
 8003e6c:	7829      	ldrb	r1, [r5, #0]
 8003e6e:	f000 f9e5 	bl	800423c <memchr>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d006      	beq.n	8003e84 <_svfiprintf_r+0x14c>
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	1b80      	subs	r0, r0, r6
 8003e7a:	4083      	lsls	r3, r0
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	3501      	adds	r5, #1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	7829      	ldrb	r1, [r5, #0]
 8003e86:	2206      	movs	r2, #6
 8003e88:	4828      	ldr	r0, [pc, #160]	; (8003f2c <_svfiprintf_r+0x1f4>)
 8003e8a:	1c6e      	adds	r6, r5, #1
 8003e8c:	7621      	strb	r1, [r4, #24]
 8003e8e:	f000 f9d5 	bl	800423c <memchr>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d03c      	beq.n	8003f10 <_svfiprintf_r+0x1d8>
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <_svfiprintf_r+0x1f8>)
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d125      	bne.n	8003ee8 <_svfiprintf_r+0x1b0>
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	9b07      	ldr	r3, [sp, #28]
 8003ea0:	3307      	adds	r3, #7
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	9307      	str	r3, [sp, #28]
 8003ea8:	6963      	ldr	r3, [r4, #20]
 8003eaa:	9a04      	ldr	r2, [sp, #16]
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	6163      	str	r3, [r4, #20]
 8003eb0:	e765      	b.n	8003d7e <_svfiprintf_r+0x46>
 8003eb2:	4343      	muls	r3, r0
 8003eb4:	0035      	movs	r5, r6
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	e7a6      	b.n	8003e0a <_svfiprintf_r+0xd2>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	e7d0      	b.n	8003e64 <_svfiprintf_r+0x12c>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	200a      	movs	r0, #10
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	3501      	adds	r5, #1
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	7829      	ldrb	r1, [r5, #0]
 8003ece:	1c6e      	adds	r6, r5, #1
 8003ed0:	3930      	subs	r1, #48	; 0x30
 8003ed2:	2909      	cmp	r1, #9
 8003ed4:	d903      	bls.n	8003ede <_svfiprintf_r+0x1a6>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0c5      	beq.n	8003e66 <_svfiprintf_r+0x12e>
 8003eda:	9209      	str	r2, [sp, #36]	; 0x24
 8003edc:	e7c3      	b.n	8003e66 <_svfiprintf_r+0x12e>
 8003ede:	4342      	muls	r2, r0
 8003ee0:	0035      	movs	r5, r6
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	1852      	adds	r2, r2, r1
 8003ee6:	e7f1      	b.n	8003ecc <_svfiprintf_r+0x194>
 8003ee8:	ab07      	add	r3, sp, #28
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	003a      	movs	r2, r7
 8003eee:	0021      	movs	r1, r4
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <_svfiprintf_r+0x1fc>)
 8003ef2:	9803      	ldr	r0, [sp, #12]
 8003ef4:	e000      	b.n	8003ef8 <_svfiprintf_r+0x1c0>
 8003ef6:	bf00      	nop
 8003ef8:	9004      	str	r0, [sp, #16]
 8003efa:	9b04      	ldr	r3, [sp, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	d1d3      	bne.n	8003ea8 <_svfiprintf_r+0x170>
 8003f00:	89bb      	ldrh	r3, [r7, #12]
 8003f02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f04:	065b      	lsls	r3, r3, #25
 8003f06:	d400      	bmi.n	8003f0a <_svfiprintf_r+0x1d2>
 8003f08:	e72d      	b.n	8003d66 <_svfiprintf_r+0x2e>
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	4240      	negs	r0, r0
 8003f0e:	e72a      	b.n	8003d66 <_svfiprintf_r+0x2e>
 8003f10:	ab07      	add	r3, sp, #28
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	003a      	movs	r2, r7
 8003f16:	0021      	movs	r1, r4
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <_svfiprintf_r+0x1fc>)
 8003f1a:	9803      	ldr	r0, [sp, #12]
 8003f1c:	f000 f87c 	bl	8004018 <_printf_i>
 8003f20:	e7ea      	b.n	8003ef8 <_svfiprintf_r+0x1c0>
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	08004625 	.word	0x08004625
 8003f28:	0800462b 	.word	0x0800462b
 8003f2c:	0800462f 	.word	0x0800462f
 8003f30:	00000000 	.word	0x00000000
 8003f34:	08003c75 	.word	0x08003c75

08003f38 <_printf_common>:
 8003f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3a:	0015      	movs	r5, r2
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	688a      	ldr	r2, [r1, #8]
 8003f40:	690b      	ldr	r3, [r1, #16]
 8003f42:	000c      	movs	r4, r1
 8003f44:	9000      	str	r0, [sp, #0]
 8003f46:	4293      	cmp	r3, r2
 8003f48:	da00      	bge.n	8003f4c <_printf_common+0x14>
 8003f4a:	0013      	movs	r3, r2
 8003f4c:	0022      	movs	r2, r4
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	3243      	adds	r2, #67	; 0x43
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	d001      	beq.n	8003f5c <_printf_common+0x24>
 8003f58:	3301      	adds	r3, #1
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	d502      	bpl.n	8003f68 <_printf_common+0x30>
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	3302      	adds	r3, #2
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	6822      	ldr	r2, [r4, #0]
 8003f6a:	2306      	movs	r3, #6
 8003f6c:	0017      	movs	r7, r2
 8003f6e:	401f      	ands	r7, r3
 8003f70:	421a      	tst	r2, r3
 8003f72:	d027      	beq.n	8003fc4 <_printf_common+0x8c>
 8003f74:	0023      	movs	r3, r4
 8003f76:	3343      	adds	r3, #67	; 0x43
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	4193      	sbcs	r3, r2
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	0692      	lsls	r2, r2, #26
 8003f82:	d430      	bmi.n	8003fe6 <_printf_common+0xae>
 8003f84:	0022      	movs	r2, r4
 8003f86:	9901      	ldr	r1, [sp, #4]
 8003f88:	9800      	ldr	r0, [sp, #0]
 8003f8a:	9e08      	ldr	r6, [sp, #32]
 8003f8c:	3243      	adds	r2, #67	; 0x43
 8003f8e:	47b0      	blx	r6
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d025      	beq.n	8003fe0 <_printf_common+0xa8>
 8003f94:	2306      	movs	r3, #6
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	682a      	ldr	r2, [r5, #0]
 8003f9a:	68e1      	ldr	r1, [r4, #12]
 8003f9c:	2500      	movs	r5, #0
 8003f9e:	4003      	ands	r3, r0
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d103      	bne.n	8003fac <_printf_common+0x74>
 8003fa4:	1a8d      	subs	r5, r1, r2
 8003fa6:	43eb      	mvns	r3, r5
 8003fa8:	17db      	asrs	r3, r3, #31
 8003faa:	401d      	ands	r5, r3
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	6922      	ldr	r2, [r4, #16]
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	dd01      	ble.n	8003fb8 <_printf_common+0x80>
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	18ed      	adds	r5, r5, r3
 8003fb8:	2700      	movs	r7, #0
 8003fba:	42bd      	cmp	r5, r7
 8003fbc:	d120      	bne.n	8004000 <_printf_common+0xc8>
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	e010      	b.n	8003fe4 <_printf_common+0xac>
 8003fc2:	3701      	adds	r7, #1
 8003fc4:	68e3      	ldr	r3, [r4, #12]
 8003fc6:	682a      	ldr	r2, [r5, #0]
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	42bb      	cmp	r3, r7
 8003fcc:	ddd2      	ble.n	8003f74 <_printf_common+0x3c>
 8003fce:	0022      	movs	r2, r4
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9901      	ldr	r1, [sp, #4]
 8003fd4:	9800      	ldr	r0, [sp, #0]
 8003fd6:	9e08      	ldr	r6, [sp, #32]
 8003fd8:	3219      	adds	r2, #25
 8003fda:	47b0      	blx	r6
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d1f0      	bne.n	8003fc2 <_printf_common+0x8a>
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	4240      	negs	r0, r0
 8003fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fe6:	2030      	movs	r0, #48	; 0x30
 8003fe8:	18e1      	adds	r1, r4, r3
 8003fea:	3143      	adds	r1, #67	; 0x43
 8003fec:	7008      	strb	r0, [r1, #0]
 8003fee:	0021      	movs	r1, r4
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	3145      	adds	r1, #69	; 0x45
 8003ff4:	7809      	ldrb	r1, [r1, #0]
 8003ff6:	18a2      	adds	r2, r4, r2
 8003ff8:	3243      	adds	r2, #67	; 0x43
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	7011      	strb	r1, [r2, #0]
 8003ffe:	e7c1      	b.n	8003f84 <_printf_common+0x4c>
 8004000:	0022      	movs	r2, r4
 8004002:	2301      	movs	r3, #1
 8004004:	9901      	ldr	r1, [sp, #4]
 8004006:	9800      	ldr	r0, [sp, #0]
 8004008:	9e08      	ldr	r6, [sp, #32]
 800400a:	321a      	adds	r2, #26
 800400c:	47b0      	blx	r6
 800400e:	1c43      	adds	r3, r0, #1
 8004010:	d0e6      	beq.n	8003fe0 <_printf_common+0xa8>
 8004012:	3701      	adds	r7, #1
 8004014:	e7d1      	b.n	8003fba <_printf_common+0x82>
	...

08004018 <_printf_i>:
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	b08b      	sub	sp, #44	; 0x2c
 800401c:	9206      	str	r2, [sp, #24]
 800401e:	000a      	movs	r2, r1
 8004020:	3243      	adds	r2, #67	; 0x43
 8004022:	9307      	str	r3, [sp, #28]
 8004024:	9005      	str	r0, [sp, #20]
 8004026:	9204      	str	r2, [sp, #16]
 8004028:	7e0a      	ldrb	r2, [r1, #24]
 800402a:	000c      	movs	r4, r1
 800402c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800402e:	2a78      	cmp	r2, #120	; 0x78
 8004030:	d807      	bhi.n	8004042 <_printf_i+0x2a>
 8004032:	2a62      	cmp	r2, #98	; 0x62
 8004034:	d809      	bhi.n	800404a <_printf_i+0x32>
 8004036:	2a00      	cmp	r2, #0
 8004038:	d100      	bne.n	800403c <_printf_i+0x24>
 800403a:	e0c1      	b.n	80041c0 <_printf_i+0x1a8>
 800403c:	2a58      	cmp	r2, #88	; 0x58
 800403e:	d100      	bne.n	8004042 <_printf_i+0x2a>
 8004040:	e08c      	b.n	800415c <_printf_i+0x144>
 8004042:	0026      	movs	r6, r4
 8004044:	3642      	adds	r6, #66	; 0x42
 8004046:	7032      	strb	r2, [r6, #0]
 8004048:	e022      	b.n	8004090 <_printf_i+0x78>
 800404a:	0010      	movs	r0, r2
 800404c:	3863      	subs	r0, #99	; 0x63
 800404e:	2815      	cmp	r0, #21
 8004050:	d8f7      	bhi.n	8004042 <_printf_i+0x2a>
 8004052:	f7fc f861 	bl	8000118 <__gnu_thumb1_case_shi>
 8004056:	0016      	.short	0x0016
 8004058:	fff6001f 	.word	0xfff6001f
 800405c:	fff6fff6 	.word	0xfff6fff6
 8004060:	001ffff6 	.word	0x001ffff6
 8004064:	fff6fff6 	.word	0xfff6fff6
 8004068:	fff6fff6 	.word	0xfff6fff6
 800406c:	003600a8 	.word	0x003600a8
 8004070:	fff6009a 	.word	0xfff6009a
 8004074:	00b9fff6 	.word	0x00b9fff6
 8004078:	0036fff6 	.word	0x0036fff6
 800407c:	fff6fff6 	.word	0xfff6fff6
 8004080:	009e      	.short	0x009e
 8004082:	0026      	movs	r6, r4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	3642      	adds	r6, #66	; 0x42
 8004088:	1d11      	adds	r1, r2, #4
 800408a:	6019      	str	r1, [r3, #0]
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	7033      	strb	r3, [r6, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	e0a7      	b.n	80041e4 <_printf_i+0x1cc>
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	1d0a      	adds	r2, r1, #4
 800409a:	0605      	lsls	r5, r0, #24
 800409c:	d50b      	bpl.n	80040b6 <_printf_i+0x9e>
 800409e:	680d      	ldr	r5, [r1, #0]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	2d00      	cmp	r5, #0
 80040a4:	da03      	bge.n	80040ae <_printf_i+0x96>
 80040a6:	232d      	movs	r3, #45	; 0x2d
 80040a8:	9a04      	ldr	r2, [sp, #16]
 80040aa:	426d      	negs	r5, r5
 80040ac:	7013      	strb	r3, [r2, #0]
 80040ae:	4b61      	ldr	r3, [pc, #388]	; (8004234 <_printf_i+0x21c>)
 80040b0:	270a      	movs	r7, #10
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	e01b      	b.n	80040ee <_printf_i+0xd6>
 80040b6:	680d      	ldr	r5, [r1, #0]
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	0641      	lsls	r1, r0, #25
 80040bc:	d5f1      	bpl.n	80040a2 <_printf_i+0x8a>
 80040be:	b22d      	sxth	r5, r5
 80040c0:	e7ef      	b.n	80040a2 <_printf_i+0x8a>
 80040c2:	680d      	ldr	r5, [r1, #0]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	1d08      	adds	r0, r1, #4
 80040c8:	6018      	str	r0, [r3, #0]
 80040ca:	062e      	lsls	r6, r5, #24
 80040cc:	d501      	bpl.n	80040d2 <_printf_i+0xba>
 80040ce:	680d      	ldr	r5, [r1, #0]
 80040d0:	e003      	b.n	80040da <_printf_i+0xc2>
 80040d2:	066d      	lsls	r5, r5, #25
 80040d4:	d5fb      	bpl.n	80040ce <_printf_i+0xb6>
 80040d6:	680d      	ldr	r5, [r1, #0]
 80040d8:	b2ad      	uxth	r5, r5
 80040da:	4b56      	ldr	r3, [pc, #344]	; (8004234 <_printf_i+0x21c>)
 80040dc:	2708      	movs	r7, #8
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	2a6f      	cmp	r2, #111	; 0x6f
 80040e2:	d000      	beq.n	80040e6 <_printf_i+0xce>
 80040e4:	3702      	adds	r7, #2
 80040e6:	0023      	movs	r3, r4
 80040e8:	2200      	movs	r2, #0
 80040ea:	3343      	adds	r3, #67	; 0x43
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db03      	blt.n	80040fe <_printf_i+0xe6>
 80040f6:	2204      	movs	r2, #4
 80040f8:	6821      	ldr	r1, [r4, #0]
 80040fa:	4391      	bics	r1, r2
 80040fc:	6021      	str	r1, [r4, #0]
 80040fe:	2d00      	cmp	r5, #0
 8004100:	d102      	bne.n	8004108 <_printf_i+0xf0>
 8004102:	9e04      	ldr	r6, [sp, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <_printf_i+0x10a>
 8004108:	9e04      	ldr	r6, [sp, #16]
 800410a:	0028      	movs	r0, r5
 800410c:	0039      	movs	r1, r7
 800410e:	f7fc f893 	bl	8000238 <__aeabi_uidivmod>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	3e01      	subs	r6, #1
 8004116:	5c5b      	ldrb	r3, [r3, r1]
 8004118:	7033      	strb	r3, [r6, #0]
 800411a:	002b      	movs	r3, r5
 800411c:	0005      	movs	r5, r0
 800411e:	429f      	cmp	r7, r3
 8004120:	d9f3      	bls.n	800410a <_printf_i+0xf2>
 8004122:	2f08      	cmp	r7, #8
 8004124:	d109      	bne.n	800413a <_printf_i+0x122>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	07db      	lsls	r3, r3, #31
 800412a:	d506      	bpl.n	800413a <_printf_i+0x122>
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6922      	ldr	r2, [r4, #16]
 8004130:	4293      	cmp	r3, r2
 8004132:	dc02      	bgt.n	800413a <_printf_i+0x122>
 8004134:	2330      	movs	r3, #48	; 0x30
 8004136:	3e01      	subs	r6, #1
 8004138:	7033      	strb	r3, [r6, #0]
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	1b9b      	subs	r3, r3, r6
 800413e:	6123      	str	r3, [r4, #16]
 8004140:	9b07      	ldr	r3, [sp, #28]
 8004142:	0021      	movs	r1, r4
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	9805      	ldr	r0, [sp, #20]
 8004148:	9b06      	ldr	r3, [sp, #24]
 800414a:	aa09      	add	r2, sp, #36	; 0x24
 800414c:	f7ff fef4 	bl	8003f38 <_printf_common>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d14c      	bne.n	80041ee <_printf_i+0x1d6>
 8004154:	2001      	movs	r0, #1
 8004156:	4240      	negs	r0, r0
 8004158:	b00b      	add	sp, #44	; 0x2c
 800415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415c:	3145      	adds	r1, #69	; 0x45
 800415e:	700a      	strb	r2, [r1, #0]
 8004160:	4a34      	ldr	r2, [pc, #208]	; (8004234 <_printf_i+0x21c>)
 8004162:	9203      	str	r2, [sp, #12]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	6821      	ldr	r1, [r4, #0]
 8004168:	ca20      	ldmia	r2!, {r5}
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	0608      	lsls	r0, r1, #24
 800416e:	d516      	bpl.n	800419e <_printf_i+0x186>
 8004170:	07cb      	lsls	r3, r1, #31
 8004172:	d502      	bpl.n	800417a <_printf_i+0x162>
 8004174:	2320      	movs	r3, #32
 8004176:	4319      	orrs	r1, r3
 8004178:	6021      	str	r1, [r4, #0]
 800417a:	2710      	movs	r7, #16
 800417c:	2d00      	cmp	r5, #0
 800417e:	d1b2      	bne.n	80040e6 <_printf_i+0xce>
 8004180:	2320      	movs	r3, #32
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	439a      	bics	r2, r3
 8004186:	6022      	str	r2, [r4, #0]
 8004188:	e7ad      	b.n	80040e6 <_printf_i+0xce>
 800418a:	2220      	movs	r2, #32
 800418c:	6809      	ldr	r1, [r1, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	6022      	str	r2, [r4, #0]
 8004192:	0022      	movs	r2, r4
 8004194:	2178      	movs	r1, #120	; 0x78
 8004196:	3245      	adds	r2, #69	; 0x45
 8004198:	7011      	strb	r1, [r2, #0]
 800419a:	4a27      	ldr	r2, [pc, #156]	; (8004238 <_printf_i+0x220>)
 800419c:	e7e1      	b.n	8004162 <_printf_i+0x14a>
 800419e:	0648      	lsls	r0, r1, #25
 80041a0:	d5e6      	bpl.n	8004170 <_printf_i+0x158>
 80041a2:	b2ad      	uxth	r5, r5
 80041a4:	e7e4      	b.n	8004170 <_printf_i+0x158>
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	680d      	ldr	r5, [r1, #0]
 80041aa:	1d10      	adds	r0, r2, #4
 80041ac:	6949      	ldr	r1, [r1, #20]
 80041ae:	6018      	str	r0, [r3, #0]
 80041b0:	6813      	ldr	r3, [r2, #0]
 80041b2:	062e      	lsls	r6, r5, #24
 80041b4:	d501      	bpl.n	80041ba <_printf_i+0x1a2>
 80041b6:	6019      	str	r1, [r3, #0]
 80041b8:	e002      	b.n	80041c0 <_printf_i+0x1a8>
 80041ba:	066d      	lsls	r5, r5, #25
 80041bc:	d5fb      	bpl.n	80041b6 <_printf_i+0x19e>
 80041be:	8019      	strh	r1, [r3, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9e04      	ldr	r6, [sp, #16]
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	e7bb      	b.n	8004140 <_printf_i+0x128>
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	1d11      	adds	r1, r2, #4
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	6816      	ldr	r6, [r2, #0]
 80041d0:	2100      	movs	r1, #0
 80041d2:	0030      	movs	r0, r6
 80041d4:	6862      	ldr	r2, [r4, #4]
 80041d6:	f000 f831 	bl	800423c <memchr>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d001      	beq.n	80041e2 <_printf_i+0x1ca>
 80041de:	1b80      	subs	r0, r0, r6
 80041e0:	6060      	str	r0, [r4, #4]
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	2300      	movs	r3, #0
 80041e8:	9a04      	ldr	r2, [sp, #16]
 80041ea:	7013      	strb	r3, [r2, #0]
 80041ec:	e7a8      	b.n	8004140 <_printf_i+0x128>
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	0032      	movs	r2, r6
 80041f2:	9906      	ldr	r1, [sp, #24]
 80041f4:	9805      	ldr	r0, [sp, #20]
 80041f6:	9d07      	ldr	r5, [sp, #28]
 80041f8:	47a8      	blx	r5
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d0aa      	beq.n	8004154 <_printf_i+0x13c>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	079b      	lsls	r3, r3, #30
 8004202:	d415      	bmi.n	8004230 <_printf_i+0x218>
 8004204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004206:	68e0      	ldr	r0, [r4, #12]
 8004208:	4298      	cmp	r0, r3
 800420a:	daa5      	bge.n	8004158 <_printf_i+0x140>
 800420c:	0018      	movs	r0, r3
 800420e:	e7a3      	b.n	8004158 <_printf_i+0x140>
 8004210:	0022      	movs	r2, r4
 8004212:	2301      	movs	r3, #1
 8004214:	9906      	ldr	r1, [sp, #24]
 8004216:	9805      	ldr	r0, [sp, #20]
 8004218:	9e07      	ldr	r6, [sp, #28]
 800421a:	3219      	adds	r2, #25
 800421c:	47b0      	blx	r6
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	d098      	beq.n	8004154 <_printf_i+0x13c>
 8004222:	3501      	adds	r5, #1
 8004224:	68e3      	ldr	r3, [r4, #12]
 8004226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	42ab      	cmp	r3, r5
 800422c:	dcf0      	bgt.n	8004210 <_printf_i+0x1f8>
 800422e:	e7e9      	b.n	8004204 <_printf_i+0x1ec>
 8004230:	2500      	movs	r5, #0
 8004232:	e7f7      	b.n	8004224 <_printf_i+0x20c>
 8004234:	08004636 	.word	0x08004636
 8004238:	08004647 	.word	0x08004647

0800423c <memchr>:
 800423c:	b2c9      	uxtb	r1, r1
 800423e:	1882      	adds	r2, r0, r2
 8004240:	4290      	cmp	r0, r2
 8004242:	d101      	bne.n	8004248 <memchr+0xc>
 8004244:	2000      	movs	r0, #0
 8004246:	4770      	bx	lr
 8004248:	7803      	ldrb	r3, [r0, #0]
 800424a:	428b      	cmp	r3, r1
 800424c:	d0fb      	beq.n	8004246 <memchr+0xa>
 800424e:	3001      	adds	r0, #1
 8004250:	e7f6      	b.n	8004240 <memchr+0x4>

08004252 <memcpy>:
 8004252:	2300      	movs	r3, #0
 8004254:	b510      	push	{r4, lr}
 8004256:	429a      	cmp	r2, r3
 8004258:	d100      	bne.n	800425c <memcpy+0xa>
 800425a:	bd10      	pop	{r4, pc}
 800425c:	5ccc      	ldrb	r4, [r1, r3]
 800425e:	54c4      	strb	r4, [r0, r3]
 8004260:	3301      	adds	r3, #1
 8004262:	e7f8      	b.n	8004256 <memcpy+0x4>

08004264 <memmove>:
 8004264:	b510      	push	{r4, lr}
 8004266:	4288      	cmp	r0, r1
 8004268:	d902      	bls.n	8004270 <memmove+0xc>
 800426a:	188b      	adds	r3, r1, r2
 800426c:	4298      	cmp	r0, r3
 800426e:	d303      	bcc.n	8004278 <memmove+0x14>
 8004270:	2300      	movs	r3, #0
 8004272:	e007      	b.n	8004284 <memmove+0x20>
 8004274:	5c8b      	ldrb	r3, [r1, r2]
 8004276:	5483      	strb	r3, [r0, r2]
 8004278:	3a01      	subs	r2, #1
 800427a:	d2fb      	bcs.n	8004274 <memmove+0x10>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	5ccc      	ldrb	r4, [r1, r3]
 8004280:	54c4      	strb	r4, [r0, r3]
 8004282:	3301      	adds	r3, #1
 8004284:	429a      	cmp	r2, r3
 8004286:	d1fa      	bne.n	800427e <memmove+0x1a>
 8004288:	e7f8      	b.n	800427c <memmove+0x18>
	...

0800428c <_free_r>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	0005      	movs	r5, r0
 8004290:	2900      	cmp	r1, #0
 8004292:	d010      	beq.n	80042b6 <_free_r+0x2a>
 8004294:	1f0c      	subs	r4, r1, #4
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da00      	bge.n	800429e <_free_r+0x12>
 800429c:	18e4      	adds	r4, r4, r3
 800429e:	0028      	movs	r0, r5
 80042a0:	f000 f918 	bl	80044d4 <__malloc_lock>
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <_free_r+0x90>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <_free_r+0x2c>
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	6014      	str	r4, [r2, #0]
 80042b0:	0028      	movs	r0, r5
 80042b2:	f000 f917 	bl	80044e4 <__malloc_unlock>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d908      	bls.n	80042ce <_free_r+0x42>
 80042bc:	6821      	ldr	r1, [r4, #0]
 80042be:	1860      	adds	r0, r4, r1
 80042c0:	4283      	cmp	r3, r0
 80042c2:	d1f3      	bne.n	80042ac <_free_r+0x20>
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	1841      	adds	r1, r0, r1
 80042ca:	6021      	str	r1, [r4, #0]
 80042cc:	e7ee      	b.n	80042ac <_free_r+0x20>
 80042ce:	001a      	movs	r2, r3
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <_free_r+0x4e>
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	d9f9      	bls.n	80042ce <_free_r+0x42>
 80042da:	6811      	ldr	r1, [r2, #0]
 80042dc:	1850      	adds	r0, r2, r1
 80042de:	42a0      	cmp	r0, r4
 80042e0:	d10b      	bne.n	80042fa <_free_r+0x6e>
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1809      	adds	r1, r1, r0
 80042e6:	1850      	adds	r0, r2, r1
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	4283      	cmp	r3, r0
 80042ec:	d1e0      	bne.n	80042b0 <_free_r+0x24>
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	1841      	adds	r1, r0, r1
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	e7da      	b.n	80042b0 <_free_r+0x24>
 80042fa:	42a0      	cmp	r0, r4
 80042fc:	d902      	bls.n	8004304 <_free_r+0x78>
 80042fe:	230c      	movs	r3, #12
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	e7d5      	b.n	80042b0 <_free_r+0x24>
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	1860      	adds	r0, r4, r1
 8004308:	4283      	cmp	r3, r0
 800430a:	d103      	bne.n	8004314 <_free_r+0x88>
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	1841      	adds	r1, r0, r1
 8004312:	6021      	str	r1, [r4, #0]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	6054      	str	r4, [r2, #4]
 8004318:	e7ca      	b.n	80042b0 <_free_r+0x24>
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	200001ac 	.word	0x200001ac

08004320 <sbrk_aligned>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4e0f      	ldr	r6, [pc, #60]	; (8004360 <sbrk_aligned+0x40>)
 8004324:	000d      	movs	r5, r1
 8004326:	6831      	ldr	r1, [r6, #0]
 8004328:	0004      	movs	r4, r0
 800432a:	2900      	cmp	r1, #0
 800432c:	d102      	bne.n	8004334 <sbrk_aligned+0x14>
 800432e:	f000 f8bf 	bl	80044b0 <_sbrk_r>
 8004332:	6030      	str	r0, [r6, #0]
 8004334:	0029      	movs	r1, r5
 8004336:	0020      	movs	r0, r4
 8004338:	f000 f8ba 	bl	80044b0 <_sbrk_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d00a      	beq.n	8004356 <sbrk_aligned+0x36>
 8004340:	2303      	movs	r3, #3
 8004342:	1cc5      	adds	r5, r0, #3
 8004344:	439d      	bics	r5, r3
 8004346:	42a8      	cmp	r0, r5
 8004348:	d007      	beq.n	800435a <sbrk_aligned+0x3a>
 800434a:	1a29      	subs	r1, r5, r0
 800434c:	0020      	movs	r0, r4
 800434e:	f000 f8af 	bl	80044b0 <_sbrk_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d101      	bne.n	800435a <sbrk_aligned+0x3a>
 8004356:	2501      	movs	r5, #1
 8004358:	426d      	negs	r5, r5
 800435a:	0028      	movs	r0, r5
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	200001b0 	.word	0x200001b0

08004364 <_malloc_r>:
 8004364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004366:	2203      	movs	r2, #3
 8004368:	1ccb      	adds	r3, r1, #3
 800436a:	4393      	bics	r3, r2
 800436c:	3308      	adds	r3, #8
 800436e:	0006      	movs	r6, r0
 8004370:	001f      	movs	r7, r3
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d232      	bcs.n	80043dc <_malloc_r+0x78>
 8004376:	270c      	movs	r7, #12
 8004378:	42b9      	cmp	r1, r7
 800437a:	d831      	bhi.n	80043e0 <_malloc_r+0x7c>
 800437c:	0030      	movs	r0, r6
 800437e:	f000 f8a9 	bl	80044d4 <__malloc_lock>
 8004382:	4d32      	ldr	r5, [pc, #200]	; (800444c <_malloc_r+0xe8>)
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	001c      	movs	r4, r3
 8004388:	2c00      	cmp	r4, #0
 800438a:	d12e      	bne.n	80043ea <_malloc_r+0x86>
 800438c:	0039      	movs	r1, r7
 800438e:	0030      	movs	r0, r6
 8004390:	f7ff ffc6 	bl	8004320 <sbrk_aligned>
 8004394:	0004      	movs	r4, r0
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d11e      	bne.n	80043d8 <_malloc_r+0x74>
 800439a:	682c      	ldr	r4, [r5, #0]
 800439c:	0025      	movs	r5, r4
 800439e:	2d00      	cmp	r5, #0
 80043a0:	d14a      	bne.n	8004438 <_malloc_r+0xd4>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	0029      	movs	r1, r5
 80043a6:	18e3      	adds	r3, r4, r3
 80043a8:	0030      	movs	r0, r6
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	f000 f880 	bl	80044b0 <_sbrk_r>
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	4283      	cmp	r3, r0
 80043b4:	d143      	bne.n	800443e <_malloc_r+0xda>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	3703      	adds	r7, #3
 80043ba:	1aff      	subs	r7, r7, r3
 80043bc:	2303      	movs	r3, #3
 80043be:	439f      	bics	r7, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	2f0c      	cmp	r7, #12
 80043c4:	d200      	bcs.n	80043c8 <_malloc_r+0x64>
 80043c6:	270c      	movs	r7, #12
 80043c8:	0039      	movs	r1, r7
 80043ca:	0030      	movs	r0, r6
 80043cc:	f7ff ffa8 	bl	8004320 <sbrk_aligned>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d034      	beq.n	800443e <_malloc_r+0xda>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	19df      	adds	r7, r3, r7
 80043d8:	6027      	str	r7, [r4, #0]
 80043da:	e013      	b.n	8004404 <_malloc_r+0xa0>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dacb      	bge.n	8004378 <_malloc_r+0x14>
 80043e0:	230c      	movs	r3, #12
 80043e2:	2500      	movs	r5, #0
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	0028      	movs	r0, r5
 80043e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	1bd1      	subs	r1, r2, r7
 80043ee:	d420      	bmi.n	8004432 <_malloc_r+0xce>
 80043f0:	290b      	cmp	r1, #11
 80043f2:	d917      	bls.n	8004424 <_malloc_r+0xc0>
 80043f4:	19e2      	adds	r2, r4, r7
 80043f6:	6027      	str	r7, [r4, #0]
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d111      	bne.n	8004420 <_malloc_r+0xbc>
 80043fc:	602a      	str	r2, [r5, #0]
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	6053      	str	r3, [r2, #4]
 8004404:	0030      	movs	r0, r6
 8004406:	0025      	movs	r5, r4
 8004408:	f000 f86c 	bl	80044e4 <__malloc_unlock>
 800440c:	2207      	movs	r2, #7
 800440e:	350b      	adds	r5, #11
 8004410:	1d23      	adds	r3, r4, #4
 8004412:	4395      	bics	r5, r2
 8004414:	1aea      	subs	r2, r5, r3
 8004416:	429d      	cmp	r5, r3
 8004418:	d0e5      	beq.n	80043e6 <_malloc_r+0x82>
 800441a:	1b5b      	subs	r3, r3, r5
 800441c:	50a3      	str	r3, [r4, r2]
 800441e:	e7e2      	b.n	80043e6 <_malloc_r+0x82>
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e7ec      	b.n	80043fe <_malloc_r+0x9a>
 8004424:	6862      	ldr	r2, [r4, #4]
 8004426:	42a3      	cmp	r3, r4
 8004428:	d101      	bne.n	800442e <_malloc_r+0xca>
 800442a:	602a      	str	r2, [r5, #0]
 800442c:	e7ea      	b.n	8004404 <_malloc_r+0xa0>
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	e7e8      	b.n	8004404 <_malloc_r+0xa0>
 8004432:	0023      	movs	r3, r4
 8004434:	6864      	ldr	r4, [r4, #4]
 8004436:	e7a7      	b.n	8004388 <_malloc_r+0x24>
 8004438:	002c      	movs	r4, r5
 800443a:	686d      	ldr	r5, [r5, #4]
 800443c:	e7af      	b.n	800439e <_malloc_r+0x3a>
 800443e:	230c      	movs	r3, #12
 8004440:	0030      	movs	r0, r6
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f000 f84e 	bl	80044e4 <__malloc_unlock>
 8004448:	e7cd      	b.n	80043e6 <_malloc_r+0x82>
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	200001ac 	.word	0x200001ac

08004450 <_realloc_r>:
 8004450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004452:	0007      	movs	r7, r0
 8004454:	000e      	movs	r6, r1
 8004456:	0014      	movs	r4, r2
 8004458:	2900      	cmp	r1, #0
 800445a:	d105      	bne.n	8004468 <_realloc_r+0x18>
 800445c:	0011      	movs	r1, r2
 800445e:	f7ff ff81 	bl	8004364 <_malloc_r>
 8004462:	0005      	movs	r5, r0
 8004464:	0028      	movs	r0, r5
 8004466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004468:	2a00      	cmp	r2, #0
 800446a:	d103      	bne.n	8004474 <_realloc_r+0x24>
 800446c:	f7ff ff0e 	bl	800428c <_free_r>
 8004470:	0025      	movs	r5, r4
 8004472:	e7f7      	b.n	8004464 <_realloc_r+0x14>
 8004474:	f000 f83e 	bl	80044f4 <_malloc_usable_size_r>
 8004478:	9001      	str	r0, [sp, #4]
 800447a:	4284      	cmp	r4, r0
 800447c:	d803      	bhi.n	8004486 <_realloc_r+0x36>
 800447e:	0035      	movs	r5, r6
 8004480:	0843      	lsrs	r3, r0, #1
 8004482:	42a3      	cmp	r3, r4
 8004484:	d3ee      	bcc.n	8004464 <_realloc_r+0x14>
 8004486:	0021      	movs	r1, r4
 8004488:	0038      	movs	r0, r7
 800448a:	f7ff ff6b 	bl	8004364 <_malloc_r>
 800448e:	1e05      	subs	r5, r0, #0
 8004490:	d0e8      	beq.n	8004464 <_realloc_r+0x14>
 8004492:	9b01      	ldr	r3, [sp, #4]
 8004494:	0022      	movs	r2, r4
 8004496:	429c      	cmp	r4, r3
 8004498:	d900      	bls.n	800449c <_realloc_r+0x4c>
 800449a:	001a      	movs	r2, r3
 800449c:	0031      	movs	r1, r6
 800449e:	0028      	movs	r0, r5
 80044a0:	f7ff fed7 	bl	8004252 <memcpy>
 80044a4:	0031      	movs	r1, r6
 80044a6:	0038      	movs	r0, r7
 80044a8:	f7ff fef0 	bl	800428c <_free_r>
 80044ac:	e7da      	b.n	8004464 <_realloc_r+0x14>
	...

080044b0 <_sbrk_r>:
 80044b0:	2300      	movs	r3, #0
 80044b2:	b570      	push	{r4, r5, r6, lr}
 80044b4:	4d06      	ldr	r5, [pc, #24]	; (80044d0 <_sbrk_r+0x20>)
 80044b6:	0004      	movs	r4, r0
 80044b8:	0008      	movs	r0, r1
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f7ff faf4 	bl	8003aa8 <_sbrk>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d103      	bne.n	80044cc <_sbrk_r+0x1c>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d000      	beq.n	80044cc <_sbrk_r+0x1c>
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	200001b4 	.word	0x200001b4

080044d4 <__malloc_lock>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4802      	ldr	r0, [pc, #8]	; (80044e0 <__malloc_lock+0xc>)
 80044d8:	f000 f814 	bl	8004504 <__retarget_lock_acquire_recursive>
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	200001b8 	.word	0x200001b8

080044e4 <__malloc_unlock>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4802      	ldr	r0, [pc, #8]	; (80044f0 <__malloc_unlock+0xc>)
 80044e8:	f000 f80d 	bl	8004506 <__retarget_lock_release_recursive>
 80044ec:	bd10      	pop	{r4, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	200001b8 	.word	0x200001b8

080044f4 <_malloc_usable_size_r>:
 80044f4:	1f0b      	subs	r3, r1, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1f18      	subs	r0, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da01      	bge.n	8004502 <_malloc_usable_size_r+0xe>
 80044fe:	580b      	ldr	r3, [r1, r0]
 8004500:	18c0      	adds	r0, r0, r3
 8004502:	4770      	bx	lr

08004504 <__retarget_lock_acquire_recursive>:
 8004504:	4770      	bx	lr

08004506 <__retarget_lock_release_recursive>:
 8004506:	4770      	bx	lr

08004508 <_init>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr

08004514 <_fini>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr
